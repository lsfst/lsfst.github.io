<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hello</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/lsfst/lsfst.github.io/"/>
  <updated>2019-07-12T03:59:40.782Z</updated>
  <id>https://github.com/lsfst/lsfst.github.io/</id>
  
  <author>
    <name>LSF</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HTTP轮询实现长连接</title>
    <link href="https://github.com/lsfst/lsfst.github.io/2019/04/20/%E9%95%BF%E8%BD%AE%E8%AF%A2/"/>
    <id>https://github.com/lsfst/lsfst.github.io/2019/04/20/长轮询/</id>
    <published>2019-04-19T16:00:00.000Z</published>
    <updated>2019-07-12T03:59:40.782Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 12 2019 16:40:24 GMT+0800 (China Standard Time) --><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>&emsp;&emsp;最近手上在做的项目要求android终端设备与服务端保持连接，服务端不定期向客户端推送消息(验证码，指令等)，原定是用Netty写一个websocket服务器做的，但由于前期进度催的比较紧，并发量也不大，Netty相关的内容我也还在学习中，经过一番讨论后还是决定先使用HTTP长轮询接口代替，之后再进行扩展。</p><h4 id="HTTP轮训"><a href="#HTTP轮训" class="headerlink" title="HTTP轮训"></a>HTTP轮训</h4><pre><code>轮询：客户端定时向服务器发送HTTP请求，服务器接到请求后马上返回响应信息并关闭连接。 优点：后端程序编写比较容易。 缺点：请求中有大半是无用，浪费带宽和服务器资源。 实例：适于小型应用。长轮询：客户端向服务器发送HTTP请求，服务器接到请求后hold住连接，直到有新消息才返回响应信息并关闭连接，客户端处理完响应信息后再向服务器发送新的请求。 优点：在无消息的情况下不会频繁的请求，耗费资源小。 缺点：服务器hold连接会消耗资源，返回数据顺序无保证，难于管理维护。 实例：WebQQ、Hi网页版、Facebook IM。</code></pre><p>&emsp;&emsp;简单轮询请求太过频繁了，业务中采用的长轮询来完成业务。既然存在并发要求和消息推送，服务端就不可能采用阻塞方法处理请求，只能采用异步线程处理请求了，具体来讲就是先hold住连接(默认30秒)，有新消息就推送过去，否则到期后返回一个默认结果。</p><h4 id="DeferredResult"><a href="#DeferredResult" class="headerlink" title="DeferredResult"></a>DeferredResult</h4><p>&emsp;&emsp;Spring提供了一个叫做DeferredResult的工具，将请求线程与后台执行线程分离，异步开来，它返回的时候实际结果可能没有生成，实际的结果可能会在另外的线程里面设置到DeferredResult中去。<br>该类包含以下特性：</p><pre><code>超时配置：通过构造函数可以传入超时时间，单位为毫秒，也可以传入默认值，超时自动返回该默认结果；因为需要等待设置结果后才能继续处理并返回客户端，如果一直等待会导致客户端一直无响应，因此必须有相应的超时机制来避免这个问题；实际上就算不设置这个超时时间，应用服务器或者Spring也会有一些默认的超时机制来处理这个问题。结果设置：它的结果存储在一个名称为result的属性中；可以通过调用setResult的方法来设置属性；由于这个DeferredResult天生就是使用在多线程环境中的，因此对这个result属性的读写是有加锁的。</code></pre><p>具体执行过程如下：</p><pre><code>1.客户端请求服务2.SpringMVC调用Controller，Controller返回一个DeferredResult对象3.SpringMVC调用ruquest.startAsync4.DispatcherServlet以及Filters等从应用服务器线程中结束，但Response仍旧是打开状态，也就是说暂时还不返回给客户端5.某些其它线程将结果设置到DeferredResult中，SpringMVC将请求发送给应用服务器继续处理6.DispatcherServlet再次被调用并且继续处理DeferredResult中的结果，最终将其返回给客户端</code></pre><h4 id="请求容器"><a href="#请求容器" class="headerlink" title="请求容器"></a>请求容器</h4><p>&emsp;&emsp;为了便于随时设置DederredResult的值，需要将DederredResult使用一个并发容器收集起来，这里使用了google guava中的Multimap，多值map,对map进行了增强，一个key可以保持多个value。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;com.google.guava&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;guava&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;23.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private static Multimap&lt; String, DeferredResult&lt; Map &gt; &gt; requestsMap = Multimaps.synchronizedSetMultimap( HashMultimap.create() );</span><br></pre></td></tr></table></figure><h5 id="消息容器"><a href="#消息容器" class="headerlink" title="消息容器"></a>消息容器</h5><p>&emsp;&emsp;由于存在着多种消息类型（验证码，升级版本，日志，cmd等），为了方便扩展直接使用Map或者SkipList存储消息；每次发布消息时，不是直接操作DeferredResult，而是先放进messageMap里面，通过定时任务定期取出messageMap里的数据设置回DeferredResult。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private static Map&lt; String, PoolingMessage &gt; messageMap = new ConcurrentSkipListMap&lt;&gt;();</span><br></pre></td></tr></table></figure><p>消息实体<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public class PoolingMessage &#123;</span><br><span class="line"></span><br><span class="line">    private String vid;</span><br><span class="line">    private long lastConnectime;</span><br><span class="line">    private Map&lt;String,String&gt; message;</span><br><span class="line"></span><br><span class="line">    public PoolingMessage( String vid)&#123;</span><br><span class="line">        this(vid,&quot;&quot;,&quot;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public PoolingMessage( String vid, String type, String message)&#123;</span><br><span class="line">        this.vid = vid;</span><br><span class="line">        this.lastConnectime = System.currentTimeMillis();</span><br><span class="line">        this.message = new HashMap&lt;&gt;();</span><br><span class="line">        this.message.put( type,message );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void setMessage( Map message ) &#123;</span><br><span class="line">        this.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setMessage( String type,String msg) &#123;</span><br><span class="line">        if(this.message==null)&#123;</span><br><span class="line">            this.message = new HashMap&lt;&gt;(  );</span><br><span class="line">        &#125;</span><br><span class="line">        this.message.put( type,msg );</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>&emsp;&emsp;话不多少，直接上代码了：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class LongPoolingContainer &#123;</span><br><span class="line">    private static Logger logger = LoggerFactory.getLogger( LongPoolingContainer.class );</span><br><span class="line">    private static Map&lt; String, PoolingMessage &gt; messageMap = new ConcurrentSkipListMap&lt;&gt;();</span><br><span class="line">    //定时轮询</span><br><span class="line">    private static ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();</span><br><span class="line">    private static Multimap&lt; String, DeferredResult&lt; Map &gt; &gt; requestsMap = Multimaps.synchronizedSetMultimap( HashMultimap.create() );</span><br><span class="line">    //SynchronizedMultimap 虽是并发容器，但多线程下遍历时进行修改还是会出现ConcurrentModificationException，需要对remove和遍历操作上锁</span><br><span class="line">    private ReentrantLock lock = new ReentrantLock();</span><br><span class="line">    //交给spring管理默认是单例，但还是得防止误操作启动多个轮询</span><br><span class="line">    private static AtomicBoolean isStarted = new AtomicBoolean(false);</span><br><span class="line">    public static Map&lt; String, String &gt; default_result = new HashMap&lt; String, String &gt;() ;</span><br><span class="line"></span><br><span class="line">    public LongPoolingContainer() &#123;</span><br><span class="line">        if ( isStarted.compareAndSet(false,true) ) &#123;</span><br><span class="line">            LongPollTask task = new LongPollTask();</span><br><span class="line">            executor.scheduleWithFixedDelay( task, 2, 1, TimeUnit.SECONDS );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public DeferredResult&lt; Map &gt; watch( String vid) &#123;</span><br><span class="line">        DeferredResult&lt; Map &gt; deferredResult = new DeferredResult&lt;&gt;( ECConstants.LONG_POLL_TIMEOUT, default_result );</span><br><span class="line">        //当deferredResult完成时（不论是超时还是异常还是正常完成），移除requestsMap中相应的watch key</span><br><span class="line">        deferredResult.onCompletion( () -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            try &#123;</span><br><span class="line">                logger.info(  &quot;complete|result:&#123;&#125;&quot;, JSONObject.toJSONString( deferredResult.getResult() ) );</span><br><span class="line">                requestsMap.remove( vid, deferredResult );</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; );</span><br><span class="line">        lock.lock();</span><br><span class="line">        try &#123;</span><br><span class="line">            requestsMap.put( vid, deferredResult );</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        return deferredResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void publish( String vid, Map&lt; String, String &gt; message ) &#123;</span><br><span class="line">        if ( !StringUtils.isEmpty( message ) ) &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            try &#123;</span><br><span class="line">                if ( requestsMap.containsKey( vid ) ) &#123;</span><br><span class="line">                    //清空对应消息</span><br><span class="line">                    clear( vid );</span><br><span class="line">                    //通知所有watch这个namespace变更的长轮询配置变更结果</span><br><span class="line">                    Collection&lt; DeferredResult&lt; Map &gt; &gt; deferredResults = requestsMap.get( vid );</span><br><span class="line">                    logger.info( &quot;&#123;&#125;|publish msg: [&#123;&#125;]&quot;, vid, JSONObject.toJSONString( message ) );</span><br><span class="line">                    for ( DeferredResult&lt; Map &gt; deferredResult : deferredResults ) &#123;</span><br><span class="line">                        deferredResult.setResult( message );</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void put( PoolingMessage message ) &#123;</span><br><span class="line">        messageMap.put( message.getVid(), message );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void del( String vid ) &#123;</span><br><span class="line">        messageMap.remove( vid );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public String getMsg( String vid, String type ) &#123;</span><br><span class="line">        PoolingMessage message = messageMap.get( vid );</span><br><span class="line">        if ( message != null ) &#123;</span><br><span class="line">            String msg = message.getMessage().get( type );</span><br><span class="line">            return msg;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setMsg( String vid, String msg ) &#123;</span><br><span class="line">        setMsg( vid, &quot;CODE&quot;, msg );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setMsg( String vid, String type, String msg ) &#123;</span><br><span class="line">        PoolingMessage message = messageMap.get( vid );</span><br><span class="line">        if ( message != null ) &#123;</span><br><span class="line">            logger.info( vid + &quot;|publish|&#123;&#125;|&#123;&#125;&quot;, type, msg );</span><br><span class="line">            message.setLastConnectime( System.currentTimeMillis() );</span><br><span class="line">            message.setMessage( type, msg );</span><br><span class="line">            put( message );</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            put( new PoolingMessage( vid, type, msg ) );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void clear( String vid ) &#123;</span><br><span class="line">        PoolingMessage message = messageMap.get( vid );</span><br><span class="line">        if ( message != null ) &#123;</span><br><span class="line">            message.setLastConnectime( System.currentTimeMillis() );</span><br><span class="line">            message.setMessage( null );</span><br><span class="line">            put( message );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    private class LongPollTask implements Runnable &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            long now = System.currentTimeMillis();</span><br><span class="line">            for ( Map.Entry&lt; String, PoolingMessage &gt; entry : messageMap.entrySet() ) &#123;</span><br><span class="line">                PoolingMessage message = entry.getValue();</span><br><span class="line">                if ( null == message || message.getLastConnectime() + ECConstants.VALID_TIME &lt; now ) &#123;</span><br><span class="line">                    logger.info( &quot;&#123;&#125;|invalidate remove&quot;, message.getVid() );</span><br><span class="line">                    del( entry.getKey() );</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    Map msg = entry.getValue().getMessage();</span><br><span class="line">                    if ( msg != null &amp;&amp; msg.size() &gt; 0 ) &#123;</span><br><span class="line">                        publish( entry.getKey(), msg );</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><a href="https://github.com/lsfst/algorithm/blob/master/src/main/java/com/algorithm/longpoll/deferredResult/LongPoolingContainer.java">源码地址</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Jul 12 2019 16:40:24 GMT+0800 (China Standard Time) --&gt;&lt;h4 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h
      
    
    </summary>
    
      <category term="Java" scheme="https://github.com/lsfst/lsfst.github.io/categories/Java/"/>
    
    
      <category term="java" scheme="https://github.com/lsfst/lsfst.github.io/tags/java/"/>
    
      <category term="长连接" scheme="https://github.com/lsfst/lsfst.github.io/tags/%E9%95%BF%E8%BF%9E%E6%8E%A5/"/>
    
      <category term="并发" scheme="https://github.com/lsfst/lsfst.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>仿照Redis实现一个简单缓存（二）</title>
    <link href="https://github.com/lsfst/lsfst.github.io/2019/03/27/%E6%89%8B%E5%86%99%E7%BC%93%E5%AD%98(2)/"/>
    <id>https://github.com/lsfst/lsfst.github.io/2019/03/27/手写缓存(2)/</id>
    <published>2019-03-26T16:00:00.000Z</published>
    <updated>2019-07-12T08:36:18.686Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 12 2019 16:40:24 GMT+0800 (China Standard Time) --><pre><code>现在实现缓存清理功能  </code></pre><h4 id="Redis缓存清理策略"><a href="#Redis缓存清理策略" class="headerlink" title="Redis缓存清理策略"></a>Redis缓存清理策略</h4><p>&emsp;&emsp;Redis提供了以下三种过期键删除策略，其中第一种和第三种是主动删除策略，第二种为被动删除策略：</p><pre><code>定时删除：在设置键的过期时间的同时，创建一个定时器，让定时器在键的过期时间来临时，立即删除对键的删除操作。惰性删除：放任键过期不管，但每次从键空间中获取键时，都检查取得的键是否过期，如果过期的话，就删除该键。如果没有过期，就返回该键。定期删除：每隔一段时间，程序对数据库进行一次检查，删除里面的过期键。至于删除多少过期键，以及检查多少数据库，由算法决定。1 定时删除特点优点：对内存友好，通过定时器可以保证过期键过期键会尽可能快的删除，并释放过期键占用的空间。缺点：1）cpu不友好，在过期键比较多的情况下，删除过期键可能会占用相当一部分cpu时间；在内存不紧张cpu紧张的情况下，将cpu时间用在删除和当前任务无关的过期键上，无疑会对服务器响应时间和吞吐量造成影响。2）创建定时器需要Redis服务器中的时间事件，而现在时间事件的实现方式是无序链表，查找一个事件的时间复杂度为O(N)，并不能高效的处理大量时间事件。2 惰性删除特点优点：1）对cpu友好，程序只在取出键时才对建进行过期检查，删除的目标仅限于当前处理的键。缺点：1）对内存不友好，当数据库中有大量的过期键，而这些键又没有被访问到，那么他们也许会永远不会被删除。3 定期删除：是前两种删除策略的一种折中。会每隔一段时间执行一次删除过期键操作，并通过限制操作执行的时长和频率来减少删除操作对cpu时间的影响。难点：确定删除策略的时长和频率1）如果删除操作太过频繁，或者执行时间太长，定期删除策略就会退化成定时删除策略。2）如果删除执行得太少，或者执行时间太短，定期删除策略又会和惰性删除策略一样，出现浪费内存现象。</code></pre><p>&emsp;&emsp;实际上，Redis服务器使用的是惰性删除和定期删除两种策略：通过配合使用这两种策略，服务器可以很好地在合理使用CPU时间和避免浪费内存空间之间取得平衡。</p><h4 id="惰性删除"><a href="#惰性删除" class="headerlink" title="惰性删除"></a>惰性删除</h4><p>其实很简单，所有读写Redis数据库的命令在执行之前都会调用expireIfNeeded函数对输入键进行检查，如果输入键过期，则删除输入键。<br>但是这么做在多线程下是有问题的，所以要么加锁，要么仿照Redis采用单线程执行任务，既然这里都使用了并发容器，当然是选择加锁了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">private final ReentrantLock lock  = new ReentrantLock();</span><br><span class="line">public void expireIfNeed(A arg)&#123;</span><br><span class="line">       lock.lock();</span><br><span class="line">        try &#123;</span><br><span class="line">            if(expired(arg))&#123;</span><br><span class="line">                cache.remove(arg);</span><br><span class="line">                expires.remove(arg)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定时删除"><a href="#定时删除" class="headerlink" title="定时删除"></a>定时删除</h4><p>Redis服务器是一个事件驱动程序，服务器中的事件分成两类，一类是文件事件(服务器与客户端或其他服务器通过套接字连接通信产生的事件的抽象)，一类是时间事件，服务器需要定期对自身的资源和状态进行检查和调整，这些操作由serverCron函数负责执行，其中就包括过期键的清理。默认情况下，serverCron每秒运行10次，平均100ms运行一次。<br>这个比较好实现，执行一个定时任务即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Eprivate final ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();</span><br><span class="line"> </span><br><span class="line"> private class ServerCron implements Runnable &#123;</span><br><span class="line"> </span><br><span class="line">     @Override</span><br><span class="line">     public void run() &#123;</span><br><span class="line">         for ( Map.Entry&lt; A, Long&gt; entry : expires.entrySet() ) &#123;</span><br><span class="line">             Long expireTime = entry.getValue();</span><br><span class="line">             if (  expireTime &gt; System.currentTimeMillis() ) &#123;</span><br><span class="line">                 del( entry.getKey() );</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这样就实现了基本功能了，当然向setnx，事务以及更复杂的功能是不支持的（逃<br><a href="https://github.com/lsfst/algorithm/blob/master/src/main/java/com/algorithm/concurrent/memorization/Memoizer4.java">完整代码</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Jul 12 2019 16:40:24 GMT+0800 (China Standard Time) --&gt;&lt;pre&gt;&lt;code&gt;现在实现缓存清理功能  
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;Redis缓存清理策略&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="Java" scheme="https://github.com/lsfst/lsfst.github.io/categories/Java/"/>
    
    
      <category term="java" scheme="https://github.com/lsfst/lsfst.github.io/tags/java/"/>
    
      <category term="redis" scheme="https://github.com/lsfst/lsfst.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>仿照Redis实现一个简单缓存（一）</title>
    <link href="https://github.com/lsfst/lsfst.github.io/2019/03/26/%E6%89%8B%E5%86%99%E7%BC%93%E5%AD%98(1)/"/>
    <id>https://github.com/lsfst/lsfst.github.io/2019/03/26/手写缓存(1)/</id>
    <published>2019-03-25T16:00:00.000Z</published>
    <updated>2019-07-12T07:14:45.539Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 12 2019 16:40:24 GMT+0800 (China Standard Time) --><pre><code>仿照Redis写一个简单的缓存，尽可能多的实现get，set，del，expire，ttl等功能。Redis是K-V数据库，本质上就是一个大的字典表，所以大部分功能可以直接使用HashMap完成。  </code></pre><h4 id="计算value"><a href="#计算value" class="headerlink" title="计算value"></a>计算value</h4><p>&emsp;&emsp;由于获取value的方式可能有多种，需要先定义计算获取value的接口<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface Computable&lt;A,V&gt; &#123;</span><br><span class="line">    V get(A arg) throws InterruptedException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>&emsp;&emsp;使用ConcurrentHashMap作为缓存结构；为了防止高并发下出现一个任务多次执行的情况，使用Future作为缓存value，获取值时直接调用future.get()返回结果,并采用putIfAbsent操作保证添加任务的原子性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">public class Memoizer&lt;A,V&gt; implements Computable&lt;A,V&gt; &#123;</span><br><span class="line">    private final Map&lt;A,Future&lt;V&gt;&gt; cache = new ConcurrentHashMap&lt;&gt;();</span><br><span class="line">    private final Computable&lt;A,V&gt; c;</span><br><span class="line"></span><br><span class="line">    public Memoizer(Computable&lt;A, V&gt; c) &#123;</span><br><span class="line">        this.c = c;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void set(A arg)&#123;</span><br><span class="line">        Future&lt;V&gt; f = cache.get(arg);</span><br><span class="line">        if(f == null)&#123;</span><br><span class="line">            cache.putIfAbsent(arg,new FutureTask&lt;&gt;(new Callable&lt;V&gt;() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public V call() throws Exception &#123;</span><br><span class="line">                    return c.compute(arg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //get自动实现了set功能</span><br><span class="line">    @Override</span><br><span class="line">    public V get(A arg) throws InterruptedException &#123;</span><br><span class="line">        while (true)&#123;</span><br><span class="line">            Future&lt;V&gt; f = cache.get(arg);</span><br><span class="line">            if(f == null)&#123;</span><br><span class="line">                Callable&lt;V&gt; eval = new Callable&lt;V&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public V call() throws Exception &#123;</span><br><span class="line">                        return c.get(arg);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                FutureTask&lt;V&gt; ft = new FutureTask&lt;&gt;(eval);</span><br><span class="line">                f = cache.putIfAbsent(arg,ft);</span><br><span class="line">                //f为null说明没有这个任务</span><br><span class="line">                if(f == null)&#123;</span><br><span class="line">                    f = ft;</span><br><span class="line">                    ft.run();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                return f.get();</span><br><span class="line">            &#125; catch (CancellationException e) &#123;</span><br><span class="line">                //缓存的是future时，会导致缓存污染，若任务被取消，需要移除任务</span><br><span class="line">                cache.remove(arg,f);</span><br><span class="line">            &#125;catch (ExecutionException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void del(A arg)&#123;</span><br><span class="line">        cache.remove(arg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>增删查改操作完成了，同时解决了并发问题，接下来实现缓存逾期和自动清理功能。</p><h4 id="缓存逾期"><a href="#缓存逾期" class="headerlink" title="缓存逾期"></a>缓存逾期</h4><p>&emsp;&emsp;在Redis中有四个命令可以设置键的生存时间，过了这段时间，该键就会自动被删除：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">EXPIRE key ttl(单位秒)</span><br><span class="line">PEXPIRE key ttl(单位毫秒)</span><br><span class="line">EXPIREAT key timestamp(秒数时间戳)</span><br><span class="line">PEXPIREAT key timestamp(毫秒数时间戳)</span><br></pre></td></tr></table></figure><br>&emsp;&emsp;虽然说有多种不同单位和形式的设置命令，但前面三个本质上都是使用PEXIPIREAT命令来实现的：无论客户端执行的是上面哪一个，经过转换之后，最终的执行效果都和执行EXPIREAT命令一样<br>伪代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//EXPIRE转成PEXPIRE</span><br><span class="line">def EXPIRE(key,ttl_in_sec)&#123;</span><br><span class="line">    //将ttl转成毫秒</span><br><span class="line">    ttl_in_ms = sec_to_ms(ttl_in_sec)</span><br><span class="line">    </span><br><span class="line">    PEXPIRE(key,ttl_in_ms);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//PEXPIRE转成PEXPIREAT</span><br><span class="line">def PEXPIRE(key,ttl_in_ms)&#123;</span><br><span class="line">    now_ms = get_current_unix_timestamp_in_ms()</span><br><span class="line">    </span><br><span class="line">    PEXPIREAT(key,now_ms+ttl_in_ms);</span><br><span class="line">&#125;  </span><br><span class="line">//EXPIREAT转成PEXPIREAT</span><br><span class="line">def EXPIREAT(key,expire_time_in_sec)&#123;</span><br><span class="line">    expire_time_in_ms = sec_to_ms(expire_time_in_sec)</span><br><span class="line">    </span><br><span class="line">    PEXPIREAT(key,expire_time_in_ms)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>&emsp;&emsp;Redis内部专门使用一个expires字典表来保存数据库中所有键的过期时间，我们称这个字典表为过期字典：<br></p><blockquote><p>过期字典的key是一个指针，指向键空间中的某个键对象；<br>过期字典的value是一个long long类型整数，记录键的过期时间———一个毫秒精度的UNIX时间戳</p></blockquote><br>&emsp;&emsp;expire的伪代码实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def PEXPIREAT(key,expire_time_in_ms)&#123;</span><br><span class="line">    //检查key是否存在</span><br><span class="line">    if key not in redisDb.dict:</span><br><span class="line">        return 0</span><br><span class="line">     //在过期字典设置过期时间 </span><br><span class="line">    redisDb.expires[key] = expire_time_in_ms</span><br><span class="line">    return 1    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>&emsp;&emsp;与之相对的PERSIST移除过期时间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def PERSIST(key)&#123;</span><br><span class="line">    if key not in redisDb.expires:</span><br><span class="line">        return 0</span><br><span class="line">        </span><br><span class="line">   redisDb.expires.remove(key)</span><br><span class="line">   return 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>&emsp;&emsp;计算剩余存活时间的TTL和PTTL<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">def PTTL(key)&#123;</span><br><span class="line">    if key not in redisDb.dict:</span><br><span class="line">        return -2</span><br><span class="line">        </span><br><span class="line">     expire_time_in_ms = redisDb.expires.get(key)</span><br><span class="line">     </span><br><span class="line">     if expire_time_in_ms is None:</span><br><span class="line">         return -1</span><br><span class="line">         </span><br><span class="line">     now_ms = get_current_unix_timestamp_in_ms()</span><br><span class="line">     </span><br><span class="line">     return (expire_time_in_ms - now_ms)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def TTL(key)&#123;</span><br><span class="line">    ttl_in_ms = PTTL(key)</span><br><span class="line">    </span><br><span class="line">    if(ttl_in_ms&lt;0):</span><br><span class="line">        return ttl_in_ms</span><br><span class="line">    else:</span><br><span class="line">        return ms_to_sec(ttl_in_ms)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>&emsp;&emsp;过期键判定EXPIRED：检查给定键是否存在于过期词典，存在则获取过期时间；检查当前UNIX时间戳是否大于键的过期时间，大于则过期<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def EXPIRED(key)&#123;</span><br><span class="line">    expire_time_in_ms = redisDb.expires.get(key)</span><br><span class="line">    </span><br><span class="line">    if expire_time_in_ms is None:</span><br><span class="line">        return False</span><br><span class="line">        </span><br><span class="line">    now_ms = get_current_unix_timestamp_in_ms()</span><br><span class="line">    </span><br><span class="line">    if now_ms&gt;expire_time_in_ms:</span><br><span class="line">        return True</span><br><span class="line">    else:</span><br><span class="line">        return False</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>&emsp;&emsp;Java实现如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">//过期时间表</span><br><span class="line">private final Map&lt;A,Long&gt; expires = new ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">public void expire(A arg ,int seconds)&#123;</span><br><span class="line">    long now = System.currentTimeMillis();</span><br><span class="line">    expireAt(arg,now+seconds*1000);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void pexpire(A arg,int ms)&#123;</span><br><span class="line">    long now = System.currentTimeMillis();</span><br><span class="line">    pexpireAt(arg,now+ms);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void expireAt(A arg,long timestamp)&#123;</span><br><span class="line">    pexpireAt(arg,timestamp*1000);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void pexpireAt(A arg,long timestamp)&#123;</span><br><span class="line">    expires.put(arg,timestamp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public boolean expired(A arg)&#123;</span><br><span class="line">    if(!expires.containsKey(arg))&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    return expires.get(arg)&lt;System.currentTimeMillis();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public long ttl(A arg)&#123;</span><br><span class="line">    long ttl_ms = pttl(arg);</span><br><span class="line">    return ttl_ms&gt;0?ttl_ms/1000:ttl_ms;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public long pttl(A arg)&#123;</span><br><span class="line">    if(!cache.containsKey(arg))&#123;</span><br><span class="line">        return -2;</span><br><span class="line">    &#125;</span><br><span class="line">    if(!expires.containsKey(arg))&#123;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    return expires.get(arg) - System.currentTimeMillis();</span><br><span class="line">&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Jul 12 2019 16:40:24 GMT+0800 (China Standard Time) --&gt;&lt;pre&gt;&lt;code&gt;仿照Redis写一个简单的缓存，尽可能多的实现get，set，del，expire，ttl等功能。
Redi
      
    
    </summary>
    
      <category term="Java" scheme="https://github.com/lsfst/lsfst.github.io/categories/Java/"/>
    
    
      <category term="java" scheme="https://github.com/lsfst/lsfst.github.io/tags/java/"/>
    
      <category term="redis" scheme="https://github.com/lsfst/lsfst.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Apache Guacamole 使用记录</title>
    <link href="https://github.com/lsfst/lsfst.github.io/2019/03/17/guacamole/"/>
    <id>https://github.com/lsfst/lsfst.github.io/2019/03/17/guacamole/</id>
    <published>2019-03-16T16:00:00.000Z</published>
    <updated>2019-07-12T03:52:27.970Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 12 2019 16:40:24 GMT+0800 (China Standard Time) --><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>&emsp;&emsp;Guacamole是由多个模块组成的无客户端的远程桌面网关，它支持VNC,RDP,SSH等标准协议。guacamole包括两大部分，guacamole-client和guacamole-server。client是一个web服务器，实现了对server的远程访问。server则实现了client和远程桌面服务的桥梁。用户通过浏览器连接到Guacamole的服务端。Guacamole的客户端是用JavaScript编写的，Guacamole server通过web容器（比如tomcat）把服务提供给用户。一旦加载，客户端通过http承载着Guacamole自己的定义的协议与服务端通信。部署在Guacamole server这边的Web应用程序，解析到Guacamole protocal，就传给Guacamole的代理guacd（中间层），这个代理替用户连接到远程机器。</p><h4 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程"></a>安装流程</h4><p><a href="http://guacamole.apache.org/releases/0.9.14/" target="_blank" rel="noopener">下载地址</a><br><a href="http://guacamole.apache.org/doc/gug/index.html" target="_blank" rel="noopener">官方文档</a></p><p>操作系统:CENTSOS 6.9+tomcat8+jdk8<br>客户端可以直接下载war包在tomcat使用，但服务端必须要下载源码在本地编译.</p><p>没时间解释了，具体流程参考<a href="http://guacamole.apache.org/doc/gug/installing-guacamole.html" target="_blank" rel="noopener">文档</a></p><p>tomcat安装<br></p><blockquote><p>yum install tomcat</p></blockquote><p></p><p>安装GCC编译环境<br></p><blockquote><p>yum install gcc</p></blockquote><p></p><p>安装依赖<br></p><blockquote><p>yum -y install cairo-devel libjpeg-devel libpng-devel uuid-devel<br>yum -y install ffmpeg-devel freerdp-devel pango-devel libssh2-devel<br>yum -y install libtelnet-devel libvncserver-devel pulseaudio-libs-devel<br>yum -y install openssl-devel libvorbis-devel libwebp-devel<br>yum -y install freerdp-plugins</p></blockquote><p></p><p>下载服务端压缩包<br></p><blockquote><p>tar -xzvf guacamole-server-0.9.14.tar.gz</p></blockquote><br>进入解压目录<br><blockquote><p>cd /guacamole-server-0.9.14/</p></blockquote><br>编译,如果检测状态含有no，需要检查上方的第三方库是否安装正确。<br><blockquote><p>./configure –with-init-dir=/etc/init.d</p></blockquote><br>安装<br><blockquote><p>make<br>make install</p></blockquote><br>启动guacd服务<br><blockquote><p>/etc/init.d/guacd start</p></blockquote><br>客户端直接将war包放在/var/lib/tomcat/webapps目录下,重启tomcat<br><blockquote><p>/etc/init.d/tomcat restart</p></blockquote><br>访问<a href="http://ip:8080/guacamole" target="_blank" rel="noopener">http://ip:8080/guacamole</a><br><img src="/2019/03/17/guacamole/1.png"><br>这时候能看到页面，但还不能登陆，还需要配置<p></p><p>默认情况下，Guacamole的默认配置目录在linux下是/etc/guacamole，在windows下则是C:\Users\curentUser.guacamole,需要在对应位置手动创建.guacamole这个目录<br>在该目录下新建guacamole.properties，这是主要的Guacamole配置文件。该文件中的属性规定了Guacamole将如何连接到guacd。在文件中写入：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">guacd-hostname:localhost</span><br><span class="line">guacd-port:4822</span><br></pre></td></tr></table></figure><br>新建user-mapping.xml 写入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;user-mapping&gt;</span><br><span class="line">    &lt;authorize username=&quot;test&quot; password=&quot;test&quot;&gt;</span><br><span class="line">        &lt;protocol&gt;vnc&lt;/protocol&gt;</span><br><span class="line">        &lt;param name=&quot;hostname&quot;&gt;192.168.162.15&lt;/param&gt;</span><br><span class="line">        &lt;param name=&quot;port&quot;&gt;5900&lt;/param&gt;</span><br><span class="line">    &lt;/authorize&gt;</span><br><span class="line">&lt;/user-mapping&gt;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><br>这里是说，新增一个vnc服务器，服务器地址为192.168.162.15，vnc所有端口为5900，guacamole连接这个vnc服务器的用户名和密码为test，test。如果想配置多个连接，就写多个authorize节点。<p></p><p>最后在服务器上搭建好VNC服务就可以在客户端进行访问了。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Jul 12 2019 16:40:24 GMT+0800 (China Standard Time) --&gt;&lt;h4 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h
      
    
    </summary>
    
      <category term="Java" scheme="https://github.com/lsfst/lsfst.github.io/categories/Java/"/>
    
    
      <category term="java" scheme="https://github.com/lsfst/lsfst.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>缓存穿透与缓存击穿问题</title>
    <link href="https://github.com/lsfst/lsfst.github.io/2019/01/17/%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%E4%B8%8E%E7%A9%BF%E9%80%8F/"/>
    <id>https://github.com/lsfst/lsfst.github.io/2019/01/17/缓存击穿与穿透/</id>
    <published>2019-01-16T16:00:00.000Z</published>
    <updated>2019-07-12T04:05:46.473Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 12 2019 16:40:24 GMT+0800 (China Standard Time) --><h4 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h4><p>缓存穿透是指查询一个一定不存在的数据，由于缓存是不命中时被动写的，并且出于容错考虑，如果从存储层查不到数据则不写入缓存，这将导致这个存在的数据每次请求都要到存储层去查询，失去了缓存的意义。在流量大时，可能DB就挂掉了。</p><h5 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h5><p>&emsp;&emsp;采用布隆过滤器，将所有可能存在的数据哈希到一个足够大的bitmap中，一个一定不存在的数据会被 这个bitmap拦截掉，从而避免了对底层存储系统的查询压力。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">private static BloomFilter&lt;Integer&gt; bloomFilter =BloomFilter.create(Funnels.integerFunnel(), size)&#123;</span><br><span class="line">      //添加所有存在的key</span><br><span class="line">      bloomFilter.put(allKeys);</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">String get(String key) &#123;</span><br><span class="line">    String value = redis.get(key);     </span><br><span class="line">    if (value  == null) &#123;</span><br><span class="line">        if(!bloomfilter.mightContain(key))&#123;</span><br><span class="line">            return null; </span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            value = db.get(key); </span><br><span class="line">            redis.set(key, value); </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">    return value；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>&emsp;&emsp;优点是思路简单,保证一致性,性能强；缺点是代码复杂度增大,需要另外维护一个集合来存放缓存的Key,且布隆过滤器不支持删值操作。</p><h5 id="缓存空值"><a href="#缓存空值" class="headerlink" title="缓存空值"></a>缓存空值</h5><p>另外也有一个更为简单粗暴的方法，如果一个查询返回的数据为空（不管是数 据不存在，还是系统故障），把这个空结果进行缓存，并设置一个较短的过期时间，防止占有太多内存空间。</p><h4 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h4><p>&emsp;&emsp;对于一些设置了过期时间的key，如果这些key可能会在某些时间点被超高并发地访问，是一种非常“热点”的数据。这个时候，需要考虑一个问题：缓存被“击穿”的问题，这个和缓存雪崩的区别在于这里针对某一key缓存，前者则是很多key。缓存在某个时间点过期的时候，恰好在这个时间点对这个Key有大量的并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。<br>&emsp;&emsp;缓存击穿本质上是并发问题。</p><p>1.互斥锁<br>&emsp;&emsp;缓存失效的时候（判断拿出来的值为空），不是立即去查询数据库，而是先获取互斥锁（单机直接加锁，分布式则使用Redis的SETNX，Zookeeper的Znode等），当操作返回成功时，再查询数据库并回设缓存；否则，就重试整个get缓存的方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public String get(key) &#123;  </span><br><span class="line">     String value = redis.get(key);  </span><br><span class="line">      if (value == null) &#123;   </span><br><span class="line">          //设置过期时间，防止del操作失败</span><br><span class="line">          if (redis.setnx(key_mutex, 1, 60) == 1) &#123;  </span><br><span class="line">               value = db.get(key);  </span><br><span class="line">                      redis.set(key, value, expire_secs);  </span><br><span class="line">                     redis.del(key_mutex);  </span><br><span class="line">              &#125; else &#123;  </span><br><span class="line">                      sleep(50);  </span><br><span class="line">                      get(key);  //重试  </span><br><span class="line">              &#125;  </span><br><span class="line">          &#125; else &#123;  </span><br><span class="line">              return value;        </span><br><span class="line">          &#125;  </span><br><span class="line"> &#125;  </span><br><span class="line"> </span><br></pre></td></tr></table></figure><h5 id="redis发布订阅模式"><a href="#redis发布订阅模式" class="headerlink" title="redis发布订阅模式"></a>redis发布订阅模式</h5><p>&emsp;&emsp;实际上redis本身也提供了的类似MQ的简单发布订阅模式，结合Spring使用起来非常简单，但是仔细看过文档后，发现这个功能还是有所不足。<br>&emsp;&emsp;redis的发布订阅与主流的消息队列中间件比较：</p><pre><code>（1）主流的消息队列如RabbitMQ,ActiveMQ等支持多种消息协议，包括AMQP，MQTT，Stomp等，并且支持JMS规范，但Redis没有提供对这些协议的支持； （2）消息队列提供持久化功能，但Redis无法对消息持久化存储，一旦消息被发送，如果没有订阅者接收，那么消息就会丢失； （3）消息队列提供了消息传输保障(发布-接收确认和事务)，当客户端连接超时或事务回滚等情况发生时，消息会被重新发送给客户端，Redis没有提供消息传输保障。 </code></pre><p>&emsp;&emsp;其中最大的缺点是消息没有持久化，没有传输保障，无法保证客户端能对消息进行消费，所以这个方案也就只能pass了。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Jul 12 2019 16:40:24 GMT+0800 (China Standard Time) --&gt;&lt;h4 id=&quot;缓存穿透&quot;&gt;&lt;a href=&quot;#缓存穿透&quot; class=&quot;headerlink&quot; title=&quot;缓存穿透&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="Java" scheme="https://github.com/lsfst/lsfst.github.io/categories/Java/"/>
    
    
      <category term="java" scheme="https://github.com/lsfst/lsfst.github.io/tags/java/"/>
    
      <category term="redis" scheme="https://github.com/lsfst/lsfst.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>类加载原理与getResourceAsStream</title>
    <link href="https://github.com/lsfst/lsfst.github.io/2019/01/05/getResource/"/>
    <id>https://github.com/lsfst/lsfst.github.io/2019/01/05/getResource/</id>
    <published>2019-01-04T16:00:00.000Z</published>
    <updated>2019-03-31T15:24:53.315Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 12 2019 16:40:24 GMT+0800 (China Standard Time) --><p>&emsp;&emsp;在项目启动时加载数据库脚本初始化数据库，采用getResourceAsStream去加载脚本，结果报错找不到对应文件。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> ...</span><br><span class="line"> InputStream sqlFileIn = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"> sqlFileIn = SqliteUtil.class.getResourceAsStream( <span class="string">"/init.sql"</span> );</span><br><span class="line"> StringBuffer sqlSb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"> <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[ <span class="number">1024</span> ];</span><br><span class="line"> <span class="keyword">int</span> byteRead = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ( ( byteRead = sqlFileIn.read( buff ) ) != -<span class="number">1</span> ) &#123;</span><br><span class="line">     sqlSb.append( <span class="keyword">new</span> String( buff, <span class="number">0</span>, byteRead, <span class="string">"utf-8"</span> ) );</span><br><span class="line">&#125;</span><br><span class="line"> sqlFileIn.close();</span><br><span class="line"> ...</span><br><span class="line"> </span><br></pre></td></tr></table></figure><br>&emsp;&emsp;没有办法，只能从getResourceAsStream的源码看起，一点一点找出结果。<p></p><h3 id="getResourceAsStream"><a href="#getResourceAsStream" class="headerlink" title="getResourceAsStream"></a>getResourceAsStream</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> InputStream <span class="title">getResourceAsStream</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">     <span class="comment">//先对资源路径解析</span></span><br><span class="line">    name = resolveName(name);</span><br><span class="line">    ClassLoader cl = getClassLoader0();</span><br><span class="line">    <span class="keyword">if</span> (cl==<span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// A system class.</span></span><br><span class="line">        <span class="keyword">return</span> ClassLoader.getSystemResourceAsStream(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//调用的getResource方法</span></span><br><span class="line">    <span class="keyword">return</span> cl.getResourceAsStream(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;Class类的getResourceAsStream方法优先委托当前Class的classLoader去加载资源文件，如果当前类的classLoader为null，则调用ClassLoader的getSystemResourceAsStream加载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Add a package name prefix if the name is not absolute,Remove leading "/" if name is absolute</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">resolveName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!name.startsWith(<span class="string">"/"</span>)) &#123;</span><br><span class="line">        Class&lt;?&gt; c = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">while</span> (c.isArray()) &#123;</span><br><span class="line">            c = c.getComponentType();</span><br><span class="line">        &#125;</span><br><span class="line">        String baseName = c.getName();</span><br><span class="line">        <span class="keyword">int</span> index = baseName.lastIndexOf(<span class="string">'.'</span>);</span><br><span class="line">        <span class="keyword">if</span> (index != -<span class="number">1</span>) &#123;</span><br><span class="line">            name = baseName.substring(<span class="number">0</span>, index).replace(<span class="string">'.'</span>, <span class="string">'/'</span>)</span><br><span class="line">                +<span class="string">"/"</span>+name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        name = name.substring(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这里getResourceAsStream需要调用resolveName()解析资源路径：如果文件名以/开头，则移除前面的/，如果不以/开头，说明是相对路径，则在前面补充上其所在包名。这里是关键，很明显我的路径”/init.sql”是有问题的，系统会在当前类同级目录下寻找init.sql文件，但我的文件没放在这，所以报错。</p><p>&emsp;&emsp;再看看ClassLoader的getSystemResourceAsStream，这个方法优先通过系统指定类加载器加载资源，又引出了getSystemClassLoader方法<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> InputStream <span class="title">getSystemResourceAsStream</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    URL url = getSystemResource(name);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> url != <span class="keyword">null</span> ? url.openStream() : <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> URL <span class="title">getSystemResource</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取system classLoader ，也即 AppClassloader</span></span><br><span class="line">    ClassLoader system = getSystemClassLoader();</span><br><span class="line">    <span class="keyword">if</span> (system == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//获取不到则通过BootStrapClassLoader加载资源</span></span><br><span class="line">        <span class="keyword">return</span> getBootstrapResource(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> system.getResource(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> URL <span class="title">getResource</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    URL url;</span><br><span class="line">    <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">        url = parent.getResource(name);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        url = getBootstrapResource(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (url == <span class="keyword">null</span>) &#123;</span><br><span class="line">        url = findResource(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> url;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="getSystemClassLoader"><a href="#getSystemClassLoader" class="headerlink" title="getSystemClassLoader"></a>getSystemClassLoader</h3><p>在ClassLoader类中getSystemClassLoader方法调用私有的initSystemClassLoader方法获得AppClassloader实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ClassLoader <span class="title">getSystemClassLoader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    initSystemClassLoader();</span><br><span class="line">    <span class="keyword">if</span> (scl == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    SecurityManager sm = System.getSecurityManager();</span><br><span class="line">    <span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</span><br><span class="line">        checkClassLoaderPermission(scl, Reflection.getCallerClass());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> scl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">initSystemClassLoader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!sclSet) &#123;</span><br><span class="line">        <span class="keyword">if</span> (scl != <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"recursive invocation"</span>);</span><br><span class="line">        sun.misc.Launcher l = sun.misc.Launcher.getLauncher();</span><br><span class="line">        <span class="keyword">if</span> (l != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Throwable oops = <span class="keyword">null</span>;</span><br><span class="line">           <span class="comment">//</span></span><br><span class="line">            scl = l.getClassLoader();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                scl = AccessController.doPrivileged(</span><br><span class="line">                    <span class="keyword">new</span> SystemClassLoaderAction(scl));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (PrivilegedActionException pae) &#123;</span><br><span class="line">                oops = pae.getCause();</span><br><span class="line">                <span class="keyword">if</span> (oops <span class="keyword">instanceof</span> InvocationTargetException) &#123;</span><br><span class="line">                    oops = oops.getCause();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (oops != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (oops <span class="keyword">instanceof</span> Error) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> (Error) oops;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// wrap the exception</span></span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> Error(oops);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sclSet = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;sun.misc.Launcher是jre中用于启动程序入口main()的类。Launcher类在new自己的时候生成AppClassloader实例并且放在自己的私有变量loader里。</p><h3 id="Launcher"><a href="#Launcher" class="headerlink" title="Launcher"></a>Launcher</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Launcher</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//私有classLoader</span></span><br><span class="line">    <span class="keyword">private</span> ClassLoader loader;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Launcher <span class="title">getLauncher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> launcher;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//公有构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Launcher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建扩展类加载器：ExtClassLoader是Launcher的内部类，继承自URLClassLoader</span></span><br><span class="line">        Launcher.ExtClassLoader var1;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            var1 = Launcher.ExtClassLoader.getExtClassLoader();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var10) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(<span class="string">"Could not create extension class loader"</span>, var10);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建用于启动应用程序的类加载器</span></span><br><span class="line">            <span class="keyword">this</span>.loader = Launcher.AppClassLoader.getAppClassLoader(var1);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var9) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(<span class="string">"Could not create application class loader"</span>, var9);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//每个线程持有一个ContextClassLoader，可以用get,set方法获取或定义。如果不加指定，就是启动线程那个类自己的类加载器。如果不是main线程，new出来的线程的话，就是父线程的类加载器</span></span><br><span class="line">        Thread.currentThread().setContextClassLoader(<span class="keyword">this</span>.loader);</span><br><span class="line">        String var2 = System.getProperty(<span class="string">"java.security.manager"</span>);</span><br><span class="line">        <span class="keyword">if</span> (var2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//根据需求创建安全管理器：SecurityManager实例</span></span><br><span class="line">            SecurityManager var3 = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="string">""</span>.equals(var2) &amp;&amp; !<span class="string">"default"</span>.equals(var2)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    var3 = (SecurityManager)<span class="keyword">this</span>.loader.loadClass(var2).newInstance();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IllegalAccessException var5) &#123;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InstantiationException var6) &#123;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException var7) &#123;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassCastException var8) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                var3 = <span class="keyword">new</span> SecurityManager();</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">if</span> (var3 == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(<span class="string">"Could not create SecurityManager: "</span> + var2);</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">            System.setSecurityManager(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说launcher初始化时做了以下工作：<br></p><blockquote><p>1.创建扩展类加载器ExtClassLoader<br>2.创建用于启动应用程序的类加载器AppClassLoader<br>3.设置当前线程的上下文类加载器为前一步创建的AppClassLoader实例<br>4.创建安全管理器SecurityManager</p></blockquote><br>&emsp;&emsp;Launcher类使用了一种类似单例模式的方法，既提供了单例模式的接口getLauncher()又把构造函数设成了public的。但是在ClassLoader中是通过单例模式取得的Launcher 实例的，所以我们写的每个类加载器得到的AppClassloader都是同一个AppClassloader类实例，也就是说所有通过正常双亲委派模式的类加载器加载的classpath下的和ext下的所有类在方法区都是同一个类，堆中的Class实例也是同一个。<p></p><h4 id="ExtClassLoader"><a href="#ExtClassLoader" class="headerlink" title="ExtClassLoader"></a>ExtClassLoader</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtClassLoader</span> <span class="keyword">extends</span> <span class="title">URLClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Launcher.<span class="function">ExtClassLoader <span class="title">getExtClassLoader</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> File[] var0 = getExtDirs();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Launcher.ExtClassLoader)AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedExceptionAction&lt;Launcher.ExtClassLoader&gt;() &#123;</span><br><span class="line">                <span class="keyword">public</span> Launcher.<span class="function">ExtClassLoader <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    <span class="keyword">int</span> var1 = var0.length;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> var2 = <span class="number">0</span>; var2 &lt; var1; ++var2) &#123;</span><br><span class="line">                        MetaIndex.registerDirectory(var0[var2]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> Launcher.ExtClassLoader(var0);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PrivilegedActionException var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (IOException)var2.getException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExtClassLoader</span><span class="params">(File[] var1)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//显示指定java.ext.dirs目录，可以通过参数Djava.ext.dirs=… 修改</span></span><br><span class="line">        <span class="keyword">super</span>(getExtURLs(var1), (ClassLoader)<span class="keyword">null</span>, Launcher.factory);</span><br><span class="line">        SharedSecrets.getJavaNetAccess().getURLClassPath(<span class="keyword">this</span>).initLookupCache(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> File[] getExtDirs() &#123;</span><br><span class="line">        <span class="comment">//ExtClassLoader加载目录</span></span><br><span class="line">        String var0 = System.getProperty(<span class="string">"java.ext.dirs"</span>);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;ExtClassLoader加载java.ext.dirs目录下的文件，默认是jre安装目录/lib/ext，是一些JDK或JRE的可选择功能扩展包。</p><h4 id="AppClassLoader"><a href="#AppClassLoader" class="headerlink" title="AppClassLoader"></a>AppClassLoader</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AppClassLoader</span> <span class="keyword">extends</span> <span class="title">URLClassLoader</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ClassLoader <span class="title">getAppClassLoader</span><span class="params">(<span class="keyword">final</span> ClassLoader var0)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String var1 = System.getProperty(<span class="string">"java.class.path"</span>);</span><br><span class="line">        <span class="keyword">final</span> File[] var2 = var1 == <span class="keyword">null</span> ? <span class="keyword">new</span> File[<span class="number">0</span>] : Launcher.getClassPath(var1);</span><br><span class="line">        <span class="keyword">return</span> (ClassLoader)AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Launcher.AppClassLoader&gt;() &#123;</span><br><span class="line">            <span class="keyword">public</span> Launcher.<span class="function">AppClassLoader <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                URL[] var1x = var1 == <span class="keyword">null</span> ? <span class="keyword">new</span> URL[<span class="number">0</span>] : Launcher.pathToURLs(var2);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Launcher.AppClassLoader(var1x, var0);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;可以看到这里取的是环境变量java.class.path中设定的路径作为类加载的搜索路径。可以通过对该变量的设定来修改默认配置。<br></p><blockquote><p>classpath是指 WEB-INF文件夹下的classes目录 ，所有src目录下面的java、xml、properties等文件编译后都会在此，所以在开发时常将相应的xml配置文件放于src或其子目录下。</p></blockquote><p></p><h3 id="类加载器总结"><a href="#类加载器总结" class="headerlink" title="类加载器总结"></a>类加载器总结</h3><p>&emsp;&emsp;Java 中的类加载器大致可以分成两类，一类是系统提供的，另外一类则是由 Java 应用开发人员编写的。系统提供的类加载器主要有下面三个：<br></p><blockquote><p>引导类加载器（bootstrap class loader）：它用来加载 Java 的核心库，是用原生代码来实现的，并不继承自java.lang.ClassLoader。<br>扩展类加载器（extensions class loader）：它用来加载 Java 的扩展库。Java 虚拟机的实现会提供一个扩展库目录。该类加载器在此目录里面查找并加载 Java 类。<br>系统类加载器（system class loader）：它根据 Java 应用的类路径（CLASSPATH）来加载 Java 类。一般来说，Java 应用的类都是由它来完成加载的。可以通过 ClassLoader.getSystemClassLoader() 来获取它。</p></blockquote><br>&emsp;&emsp;除了系统提供的类加载器以外，开发人员可以通过继承 java.lang.ClassLoader 类的方式实现自己的类加载器，以满足一些特殊的需求。<br>&emsp;&emsp;除了引导类加载器之外，所有的类加载器都有一个父类加载器。类加载采用委托模式，先一层一层交给父类加载，父加载不成功再一层一层转给子加载。<br><blockquote><p>&emsp;&emsp;要点1：为什么采用这种委托方式，是为了安全，比如用户自定义了个java.lang.String,那么如果不交给引导类加载器去加载的话，内存中就会有不止一个String的类实例。而且一个限定包内访问权限的内容，黑客也可以用这种方式获取（要点2再继续说明）。采用了这种方式的话，引导类加载器只会加载一次类，看见用户自定义的String来了，就去看自己有没有加载，结果是系统一启动就加载了java.lang.String类，就不会再去加载了。<br>&emsp;&emsp;要点2：判断一个类是否相等不仅要看类是否名字一样，而且要看是否有同一个类初始化加载器。所以如果黑客要自己搞一个java.lang.Hack类来加载，由委托模式开始，引导类加载器加载这个类失败，那就只能交给用户自定义的类加载起来加载。所以这个类和系统的那个lang包里的类不在一个初始化加载器里，就算包名都一样，还是不能访问那些包内可见的内容的。</p></blockquote><p></p><p>&emsp;&emsp;进一步说明：有两个术语，一个叫“定义类加载器”，一个叫“初始类加载器”。比如有如下的类加载器结构：</p><pre><code>bootstrap  ExtClassloader    AppClassloader    -自定义clsloadr1    -自定义clsloadr2 </code></pre><p>&emsp;&emsp;如果用“自定义clsloadr1”加载java.lang.String类，那么根据双亲委派最终bootstrap会加载此类，那么bootstrap类就叫做该类的“定义类加载器”，而包括bootstrap的所有得到该类class实例的类加载器都叫做“初始类加载器”。</p><p>&emsp;&emsp;所说的“命名空间”，是指jvm为每个类加载器维护的一个“表”,这个表记录了所有以此类加载器为“初始类加载器”（而不是定义类加载器，所以一个类可以存在于很多的命名空间中）加载的类的列表。所以，对于String类来说，bootstrap是“定义类加载器”，AppClassloader是“初始类加载器”。根据刚才所说，String类在AppClassloader的命名空间中（同时也在bootstrap，ExtClassloader的命名空间中，因为bootstrap，ExtClassloader也是String的初始类加载器），所以在AppClassloader命名空间中的类可以随便访问String类。这样就可以解释“处在不同命名空间的类，不能直接互相访问”这句话了。</p><p>&emsp;&emsp;一个类，由不同的类加载器实例加载的话，会在方法区产生两个不同的类，彼此不可见，并且在堆中生成不同Class实例。</p><p>&emsp;&emsp;由不同类加载器实例（比如-自定义clsloadr1，-自定义clsloadr2）所加载的classpath下和ext下的类，也就是由我们自定义的类加载器委派给AppClassloader和ExtClassloader加载的类，在内存中是同一个类吗？<br>&emsp;&emsp;所有继承ClassLoader并且没有重写getSystemClassLoader方法的类加载器，通过getSystemClassLoader方法得到的AppClassloader都是同一个AppClassloader实例，类似单例模式。也就是所有通过正常双亲委派模式的类加载器加载的classpath下的和ext下的所有类在方法区都是同一个类，堆中的Class实例也是同一个。</p><pre><code>ContextClassLoader每个线程持有一个ContextClassLoader，可以用get,set方法获取或定义。如果不加指定，就是启动线程那么类自己的类加载器。如果不是main线程，new出来的线程的话，就是父线程的类加载器。为什么要有这么一个东西呢，因为为了安全ClassLoader的委托机制不能满足一些特定需要,这个时候就要用这种方式走后门。比如jdbc,jndi,tomcat等:Java 提供了很多服务提供者接口（Service Provider Interface，SPI），允许第三方为这些接口提供实现。常见的 SPI 有 JDBC、JCE、JNDI、JAXP 和 JBI 等。这些 SPI 的接口由 Java 核心库来提供，如 JAXP 的 SPI 接口定义包含在 javax.xml.parsers 包中。这些 SPI 的实现代码很可能是作为 Java 应用所依赖的 jar 包被包含进来，可以通过类路径（CLASSPATH）来找到。而问题在于，SPI 的接口是 Java 核心库的一部分，是由引导类加载器来加载的；SPI 实现的 Java 类一般是由系统类加载器来加载的。引导类加载器是无法找到 SPI 的实现类的，因为它只加载 Java 的核心库。它也不能代理给系统类加载器，因为它是系统类加载器的祖先类加载器。也就是说，类加载器的代理模式无法解决这个问题。线程上下文类加载器正好解决了这个问题。在 SPI 接口的代码中使用线程上下文类加载器，就可以成功的加载到 SPI 实现的类。线程上下文类加载器在很多 SPI 的实现中都会用到。</code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>了解了类加载机制后，那么前面getResourceAsStream的问题就好解决了，总结一下getResourceAsStream的用法：<br></p><blockquote><ol><li>Class.getResourceAsStream(String path) ： path 不以’/‘开头时默认是从此类所在的包下取资源，以’/‘开头则是从 ClassPath根下获取。其只是通过path构造一个绝对路径，最终还是由ClassLoader获取资源。</li><li>Class.getClassLoader.getResourceAsStream(String path) ： 默认则是从ClassPath根下获取，path不能以’/‘开头，最终是由 ClassLoader获取资源。</li><li>ServletContext. getResourceAsStream(String path)： 默认从WebAPP根目录下取资源，Tomcat下path是否以’/‘开头无所谓，当然这和具体的容器实现有关。</li><li>Jsp下的application内置对象就是上面的ServletContext的一种实现</li></ol></blockquote><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Jul 12 2019 16:40:24 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在项目启动时加载数据库脚本初始化数据库，采用getResourceAsStream去加载脚本，结果报
      
    
    </summary>
    
      <category term="Java" scheme="https://github.com/lsfst/lsfst.github.io/categories/Java/"/>
    
    
      <category term="java" scheme="https://github.com/lsfst/lsfst.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis配置mysql+sqlite双数据源</title>
    <link href="https://github.com/lsfst/lsfst.github.io/2019/01/05/MybatisSqliteMysql/"/>
    <id>https://github.com/lsfst/lsfst.github.io/2019/01/05/MybatisSqliteMysql/</id>
    <published>2019-01-04T16:00:00.000Z</published>
    <updated>2019-03-31T13:17:18.891Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 12 2019 16:40:24 GMT+0800 (China Standard Time) --><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>&emsp;&emsp;目前需要对现有业务进行一次拆分，在项目里面配置两个数据源，要求权限，路由相关的数据在sqlite中操作，其他的数据在mysql中操作。sqlite是一款轻型的、嵌入式的关系型数据库，具体使用起来跟mysql大同小异。所以这实际上就是一个多数据源配置的问题，琢磨了好一会，算是找到了一种可行的方案。</p><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><p>&emsp;&emsp;话不多说，先引入依赖，主要是mybatis和jdbc连接包：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;8.0.15&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.xerial&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;sqlite-jdbc&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.21.0.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server.port=<span class="number">9090</span></span><br><span class="line"></span><br><span class="line">spring.datasource.mysql.driver-<span class="class"><span class="keyword">class</span>-<span class="title">name</span></span>=com.mysql.cj.jdbc.Driver</span><br><span class="line">spring.datasource.mysql.jdbc-url=jdbc:mysql:<span class="comment">//localhost:3306/test?serverTimezone=UTC&amp;useSSL=false</span></span><br><span class="line">spring.datasource.mysql.username=root</span><br><span class="line">spring.datasource.mysql.password=myvifi</span><br><span class="line"></span><br><span class="line">spring.datasource.sqlite.driver-<span class="class"><span class="keyword">class</span>-<span class="title">name</span> </span>= org.sqlite.JDBC</span><br><span class="line">spring.datasource.sqlite.jdbc-url = jdbc:sqlite:sqlite.db</span><br></pre></td></tr></table></figure><p>其中要注意的点：<br></p><blockquote><p>1.配置单数据源时数据库配置不能用-隔开，会报错，使用spring.datasource.url 和spring.datasource.driverClassName即可；<br>2.使用springboot2.0配置多数据源时需要-隔开：如spring.datasource.jdbc-url和spring.datasource.driver-class-name<br>3.mysql-connector-java 6 以上版本必须指定时区serverTimezone,驱动使用com.mysql.cj.jdbc.Driver</p></blockquote><p></p><h3 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h3><p>mysql为主库,sqlite的代码就不贴来，与mysql大体一样，去掉@Primary注解，同时更换对应mapper目录即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan</span>(basePackages = <span class="string">"com.example.sqliteandmysql.mapper.test1"</span>, sqlSessionTemplateRef  = <span class="string">"mysqlSqlSessionTemplate"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSource1Config</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"mysqlDataSource"</span>)</span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.mysql"</span>)</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">testDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"mysqlSqlSessionFactory"</span>)</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">testSqlSessionFactory</span><span class="params">( @Qualifier(<span class="string">"mysqlDataSource"</span>)</span> DataSource dataSource) <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSessionFactoryBean bean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        bean.setDataSource(dataSource);</span><br><span class="line">        bean.setMapperLocations(<span class="keyword">new</span> PathMatchingResourcePatternResolver().getResources(<span class="string">"classpath:mybatis/mapper/test1/*.xml"</span>));</span><br><span class="line">        <span class="keyword">return</span> bean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"mysqlTransactionManager"</span>)</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">testTransactionManager</span><span class="params">( @Qualifier(<span class="string">"mysqlDataSource"</span>)</span> DataSource dataSource) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"mysqlSqlSessionTemplate"</span>)</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionTemplate <span class="title">testSqlSessionTemplate</span><span class="params">( @Qualifier(<span class="string">"mysqlSqlSessionFactory"</span>)</span> SqlSessionFactory sqlSessionFactory) <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SqlSessionTemplate(sqlSessionFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><div><img src="/2019/01/05/MybatisSqliteMysql/1.png" title="项目结构"></div><h3 id="数据库初始化"><a href="#数据库初始化" class="headerlink" title="数据库初始化"></a>数据库初始化</h3><h4 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS `users`;</span><br><span class="line">CREATE TABLE `users` (</span><br><span class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &apos;主键id&apos;,</span><br><span class="line">  `userName` varchar(32) DEFAULT NULL COMMENT &apos;用户名&apos;,</span><br><span class="line">  `passWord` varchar(32) DEFAULT NULL COMMENT &apos;密码&apos;,</span><br><span class="line">  `user_sex` varchar(32) DEFAULT NULL,</span><br><span class="line">  `nick_name` varchar(32) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=28 DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">INSERT INTO users VALUES(1,&quot;李大姐&quot;,&quot;654321&quot;,&quot;WOMAN&quot;,&quot;李大姐mysql&quot;);</span><br></pre></td></tr></table></figure><h4 id="sqlite"><a href="#sqlite" class="headerlink" title="sqlite"></a>sqlite</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS `users`;</span><br><span class="line">create table users</span><br><span class="line">(</span><br><span class="line"> id int not null,</span><br><span class="line"> passWord char(32),</span><br><span class="line"> userName char(32),</span><br><span class="line"> user_sex char(32),</span><br><span class="line"> nick_name char(32)</span><br><span class="line">);</span><br><span class="line">insert into users values (1,123456,&quot;张三&quot;,&quot;MAN&quot;,&quot;张麻子sqlite&quot;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>顺便说说sqlite中的一些坑：<br></p><blockquote><p>&emsp;&emsp;1.sqlite自带自增row_id主键，所以不允许自定义自增主键。<br>&emsp;&emsp;sqlite中每个表都默认包含一个隐藏列rowid(使用WITHOUT ROWID定义的表除外)。通常情况下，rowid可以唯一的标记表中的每个记录。表中插入的第一条记录的rowid为1，后续插入的记录的rowid由当前最大rowid+1得到。但默认的rowid不会持久化，比如：当所有记录被清空时，再插入记录时rowid会重新从1开始计数；也即每次插入数据设置rowid时，都会在当前已有的最大rowid的基础上+1，这一点与mysql的Integer AutoIncreament不同，mysql会跳过已经使用过的自增主键。<br>&emsp;&emsp;所以如果要实现mysql那样的主键，需要声明WITHOUT ROWI放弃掉原生主键，同时指定新的主键，相当于是给rowid赋予了别名，同时实现了持久化。<br>&emsp;&emsp;2.模糊类型带来的问题<br>&emsp;&emsp;由于sqlite的数据类型比较模糊，所以从mysql迁移到sqlite时，javabean中的数据类型会发生微调，比如datetime会转化成String或者Integer，这一点需要在业务中进行处理。</p></blockquote><p></p><p>对应的实体类：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class User implements Serializable &#123;</span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line">    private Long id;</span><br><span class="line">    private String userName;</span><br><span class="line">    private String passWord;</span><br><span class="line">    private UserSexEnum userSex;</span><br><span class="line">    private String nickName;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p></p><h3 id="对外接口"><a href="#对外接口" class="headerlink" title="对外接口"></a>对外接口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private User1Mapper user1Mapper;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private User2Mapper user2Mapper;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/mysql/getUsers&quot;)</span><br><span class="line">    public List&lt; User &gt; get1Users() &#123;</span><br><span class="line">        List&lt;User&gt; users=user1Mapper.getAll();</span><br><span class="line">        return users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/sqlite/getUsers&quot;)</span><br><span class="line">    public List&lt; User &gt; get2Users() &#123;</span><br><span class="line">        List&lt;User&gt; users=user2Mapper.getAll();</span><br><span class="line">        return users;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><img src="/2019/01/05/MybatisSqliteMysql/2.png"> <img src="/2019/01/05/MybatisSqliteMysql/3.png"><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Jul 12 2019 16:40:24 GMT+0800 (China Standard Time) --&gt;&lt;h3 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h
      
    
    </summary>
    
      <category term="Java" scheme="https://github.com/lsfst/lsfst.github.io/categories/Java/"/>
    
    
      <category term="java" scheme="https://github.com/lsfst/lsfst.github.io/tags/java/"/>
    
      <category term="sqlite" scheme="https://github.com/lsfst/lsfst.github.io/tags/sqlite/"/>
    
  </entry>
  
  <entry>
    <title>sqlite相关介绍</title>
    <link href="https://github.com/lsfst/lsfst.github.io/2018/12/23/sqlite%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D/"/>
    <id>https://github.com/lsfst/lsfst.github.io/2018/12/23/sqlite相关介绍/</id>
    <published>2018-12-22T16:00:00.000Z</published>
    <updated>2019-03-12T17:08:30.079Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 12 2019 16:40:24 GMT+0800 (China Standard Time) --><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>&emsp;&emsp;就大部分的增删查改操作而言，sqlite与mysql没多大区别。不过，与mysql不同的是，sqlite的数据类型是动态数据类型，值的数据类型和值本身，而不是和它的容器，关联在一起的。</p><h4 id="存储类"><a href="#存储类" class="headerlink" title="存储类"></a>存储类</h4><p>&emsp;&emsp;每个存储在SQLite数据库中（或被数据库引擎操纵的）的值都有下列存储类的一个：</p><blockquote><p>1.NULL：空值。<br>2.INTEGER：带符号的整型，具体取决于存入数字的范围大小。<br>3.REAL：浮点数字，存储为8-byte IEEE浮点数。<br>4.TEXT：字符串文本。<br>5.BLOB：二进制对象。</p></blockquote><h4 id="数据类型-1"><a href="#数据类型-1" class="headerlink" title="数据类型"></a>数据类型</h4><p>&emsp;&emsp;实际上，sqlite3也接受如下的数据类型：</p><blockquote><p>smallint 16 位元的整数。<br>integer 32 位元的整数。<br>decimal(p,s) p 精确值和 s 大小的十进位整数，精确值p是指全部有几个数(digits)大小值，s是指小数点後有几位数。如果没有特别指定，则系统会设为 p=5; s=0 。<br>float 32位元的实数。<br>double 64位元的实数。<br>char(n) n 长度的字串，n不能超过 254。<br>varchar(n) 长度不固定且其最大长度为 n 的字串，n不能超过 4000。<br>graphic(n) 和 char(n) 一样，不过其单位是两个字元 double-bytes， n不能超过127。这个形态是为了支援两个字元长度的字体，例如中文字。<br>vargraphic(n) 可变长度且其最大长度为 n 的双字元字串，n不能超过 2000<br>date 包含了 年份、月份、日期。<br>time 包含了 小时、分钟、秒。<br>timestamp 包含了 年、月、日、时、分、秒、千分之一秒。<br>datetime 包含日期时间格式，必须写成’2010-08-05’不能写为’2010-8-5’，否则在读取时会产生错误！</p></blockquote><p><strong>&emsp;&emsp;注意存储类（storage class）比数据类型更一般。INTEGER存储类，例如，包含6种长度不同的整数数据类型。这在磁盘中是有区别的。不过一旦INTEGER值从磁盘读到内容中进行处理的时候，这些值会转化为更普通的数据类型（8位有符号整数）。因此在大部分情况下，存储类和数据类型是不易分辨的，这两个术语可以交换使用。</strong></p><p>&emsp;&emsp;当然，由于SQLite是无类型的. 所以可以保存任何类型的数据到任何表的任何列中, 无论这列声明的数据类型是什么(只有自动递增Integer Primary Key才有用). 对于SQLite来说对字段不指定类型是完全有效的. 如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Create Table ex3(a, b, c); </span><br></pre></td></tr></table></figure><p>&emsp;&emsp;尽管SQLite允许忽略数据类型, 最好还是在创建表时指定数据类型. 因为指定数据类型便于理解交流, 也便于更换数据库引擎。常见的数据类型有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS ex2(      </span><br><span class="line">a VARCHAR(10),      </span><br><span class="line">b NVARCHAR(15),     </span><br><span class="line">c TEXT,      </span><br><span class="line">d INTEGER,     </span><br><span class="line">e FLOAT,     </span><br><span class="line">f BOOLEAN,      </span><br><span class="line">g CLOB,      </span><br><span class="line">h BLOB,      </span><br><span class="line">i TIMESTAMP,     </span><br><span class="line">j NUMERIC(10,5),      </span><br><span class="line">k VARYING CHARACTER (24),      </span><br><span class="line">l NATIONAL VARYING CHARACTER(16)     </span><br><span class="line">); </span><br></pre></td></tr></table></figure><h4 id="char、varchar、text和nchar、nvarchar、ntext的区别"><a href="#char、varchar、text和nchar、nvarchar、ntext的区别" class="headerlink" title="char、varchar、text和nchar、nvarchar、ntext的区别"></a>char、varchar、text和nchar、nvarchar、ntext的区别</h4><blockquote><p>1、CHAR。CHAR存储定长数据很方便，CHAR字段上的索引效率级高，比如定义char(10)，那么不论你存储的数据是否达到了10个字节，都要占去10个字节的空间,不足的自动用空格填充。</p><p>2、VARCHAR。存储变长数据，但存储效率没有CHAR高。如果一个字段可能的值是不固定长度的，我们只知道它不可能超过10个字符，把它定义为 VARCHAR(10)是最合算的。VARCHAR类型的实际长度是它的值的实际长度+1。为什么“+1”呢？这一个字节用于保存实际使用了多大的长度。从空间上考虑，用varchar合适；从效率上考虑，用char合适，关键是根据实际情况找到权衡点。</p><p>3、TEXT。text存储可变长度的非Unicode数据，最大长度为2^31-1(2,147,483,647)个字符。</p><p>4、NCHAR、NVARCHAR、NTEXT。这三种从名字上看比前面三种多了个“N”。它表示存储的是Unicode数据类型的字符。我们知道字符中，英文字符只需要一个字节存储就足够了，但汉字众多，需要两个字节存储，英文与汉字同时存在时容易造成混乱，Unicode字符集就是为了解决字符集这种不兼容的问题而产生的，它所有的字符都用两个字节表示，即英文字符也是用两个字节表示。nchar、nvarchar的长度是在1到4000之间。和char、varchar比较起来，nchar、nvarchar则最多存储4000个字符，不论是英文还是汉字；而char、varchar最多能存储8000个英文，4000个汉字。可以看出使用nchar、nvarchar数据类型时不用担心输入的字符是英文还是汉字，较为方便，但在存储英文时数量上有些损失。</p></blockquote><p>&emsp;&emsp;所以一般来说，如果含有中文字符，用nchar/nvarchar，如果纯英文和数字，用char/varchar。</p><p>&emsp;&emsp;SQL语句中的所有值，不管是SQL语句中嵌入的字面值，还是预编译的SQL语句中的参数，都有一个隐式的存储类。在下面描述的条件下，在查询执行阶段，数据库引擎可能会在数字存储类（INTEGER和REAL）和TEXT存储类之间转换。<br></p><blockquote><ol><li>Boolean数据类型<br>SQLite没有单独的Boolean存储类，相反，Booean值以整数0（false）和1（true）存储。</li><li>日期和时间数据类型<br>SQLite没有为存储日期和/或时间设置专门的存储类，相反，内置的日期和时间函数能够把日期和时间作为TEXT，REAL或INTEGER值存储：<br>TEXT：作为ISO8601字符串（”YYYY-MM-DD HH:MM:SS.SSS”）。<br>REAL：作为Julian天数，……<br>INTEGER：作为Unix Time，即自1970-01-01 00:00:00 UTC以下的秒数。</li></ol></blockquote><p></p><h3 id="类型相像（type-affinity）"><a href="#类型相像（type-affinity）" class="headerlink" title="类型相像（type affinity）"></a>类型相像（type affinity）</h3><p>&emsp;&emsp;为了最大化SQLite和其他数据库引擎之间的兼容性，SQLite支持列的”类型相像“的概念。这里重要的思想是，类型是推荐的，不是必需的。任何列仍然能够存储任何类型的数据。只是某些列，能够选择优先使用某种存储类。这个对列的优先存储类称作它的”相像“。<br>&emsp;&emsp;SQLite 3 数据库中的每个列都赋予下面类型相像中的一个：<br></p><blockquote><p>TEXT<br>NUMERIC<br>INTEGER<br>REAL<br>NONE</p></blockquote><br>&emsp;&emsp;带有TEXT相像的列会使用存储类NULL、TEXT或BLOB来存储所有的数据。如果数据数据被插入到带有TEXT相像的列中，它会在插入前转换为文本格式。<br>&emsp;&emsp;带有NUMERIC相像的列可以使用所有5个存储类来包含值。当文本数据被插入到一个NUMERIC列，文本的存储类会被转换成INTEGER或REAL（为了优先），如果这个转换是无损的和可逆的话。如果TEXT到INTEGER或REAL的转换是不可能的，那么值会使用TEXT存储类存储。不会试图转换NULL或BLOB值。<p></p><h4 id="列相像的确定"><a href="#列相像的确定" class="headerlink" title="列相像的确定"></a>列相像的确定</h4><p>&emsp;&emsp;列相像是由列声明的类型确定的，规则是按照下面的顺序：</p><pre><code>1. 如果声明的类型包含字符串”INT“那么它被赋予INTEGER相像。2. 如果列声明的类型包含任何字符串”CHAR“，”CLOB“，或”TEXT“，那么此列拥有TEXT相像。注意类型VARCHAR包含”CHAR“，因此也会赋予TEXT相像。3. 如果列声明的类型包含”BLOB“或没有指定类型，那么此列拥有NONE相像。4. 如果列声明的类型包含任何”REAL“，”FLOA“，或”DOUB“，那么此列拥有REAL相像。5. 其他情况，相像是NUMERIC。</code></pre><p>注意规则的顺序是重要的。声明类型为“CHARINT”的列同时匹配规则1和规则2，但第一个规则会优先采用，因此此列的相像是INTEGER。</p><h4 id="比较表达式"><a href="#比较表达式" class="headerlink" title="比较表达式"></a>比较表达式</h4><pre><code>Sqlite v3有一系列有用的比较操作符，包括 &quot;=&quot;, &quot;==&quot;, &quot;&lt;&quot;, &quot;&lt;=&quot;, &quot;&gt;&quot;, &quot;&gt;=&quot;, &quot;!=&quot;, &quot;&lt;&gt;&quot;, &quot;IN&quot;, &quot;NOT IN&quot;, &quot;BETWEEN&quot;, &quot;IS&quot;, 和 &quot;IS NOT&quot;</code></pre><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p>&emsp;&emsp;比较操作的结果基于操作数的存储类型，根据下面的规则：</p><pre><code>存储类型为NULL的值被认为小于其他任何的值（包括另一个存储类型为NULL的值）;一个INTEGER或REAL值小于任何TEXT或BLOB值。当一个INTEGER或REAL值与另外一个INTEGER或REAL值比较的话，就执行数值比较;TEXT值小于BLOB值。当两个TEXT值比较的时候，就根据序列的比较来决定结果;当两个BLOB值比较的时候，使用memcmp来决定结果.</code></pre><h4 id="比较操作数的近似（Affinity）"><a href="#比较操作数的近似（Affinity）" class="headerlink" title="比较操作数的近似（Affinity）"></a>比较操作数的近似（Affinity）</h4><p>&emsp;&emsp;Sqlite可能在执行一个比较之前会在INTEGER，REAL或TEXT之间转换比较值。是否在比较操作之前发生转换基于操作数的近似（类型）。操作数近似（类型）由下面的规则决定：</p><pre><code> 对一个列的简单引用的表达式与这个列有相同的affinity，注意如果X和Y.Z是列名，那么+X和+Y.Z均被认为是用于决定affinity的表达式一个”CAST(expr as type)”形式的表达式与用声明类型为”type”的列有相同的affinity 其他的情况，一个表达式为NONE affinity</code></pre><h4 id="在比较前的类型转换"><a href="#在比较前的类型转换" class="headerlink" title="在比较前的类型转换"></a>在比较前的类型转换</h4><p>&emsp;&emsp;只有在转换是无损、可逆转的时候“应用近似”才意味着将操作数转换到一个特定的存储类。近似在比较之前被应用到比较的操作数，遵循下面的规则（根据先后顺序）:</p><pre><code>如果一个操作数有INTEGER，REAL或NUMERIC近似，另一个操作数有TEXT或NONE近似，那么NUMERIC近似被应用到另一个操作数;如果一个操作数有TEXT近似，另一个有NONE近似，那么TEXT近似被应用到另一个操作数;其他的情况，不应用近似，两个操作数按本来的样子比较;表达式&quot;a BETWEEN b AND c&quot;表示两个单独的二值比较” a &gt;= b AND a &lt;= c”，即使在两个比较中不同的近似被应用到’a’。</code></pre><h4 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h4><p>&emsp;&emsp;所有的数学操作符(+, -, *, /, %, &lt;&lt;, &gt;&gt;, &amp;, |)，在被执行前，都会将两个操作数都转换为数值存储类型（INTEGER和REAL）。即使这个转换是有损和不可逆的，转换仍然会执行。一个数学操作符上的NULL操作数将产生NULL结果。一个数学操作符上的操作数，如果以任何方式看都不像数字，并且又不为空的话，将被转换为0或0.0。</p><p>&emsp;&emsp;有兴趣了解更多可以参考<a href="https://cloud.tencent.com/developer/section/1419985" target="_blank" rel="noopener">这里</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Jul 12 2019 16:40:24 GMT+0800 (China Standard Time) --&gt;&lt;h3 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="Java" scheme="https://github.com/lsfst/lsfst.github.io/categories/Java/"/>
    
    
      <category term="sqlite" scheme="https://github.com/lsfst/lsfst.github.io/tags/sqlite/"/>
    
  </entry>
  
  <entry>
    <title>java集成sqlite</title>
    <link href="https://github.com/lsfst/lsfst.github.io/2018/12/23/java%E9%9B%86%E6%88%90sqlite/"/>
    <id>https://github.com/lsfst/lsfst.github.io/2018/12/23/java集成sqlite/</id>
    <published>2018-12-22T16:00:00.000Z</published>
    <updated>2019-03-31T12:06:23.557Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 12 2019 16:40:24 GMT+0800 (China Standard Time) --><h4 id="sqlite是啥？"><a href="#sqlite是啥？" class="headerlink" title="sqlite是啥？"></a>sqlite是啥？</h4><p>&emsp;&emsp;sqlite，是一款轻型的、嵌入式的关系型数据库。它占用资源非常的低，在嵌入式设备中，可能只需要几百K的内存就够了。它能够支持Windows/Linux/Unix等等主流的操作系统，同时能够跟很多程序语言相结合。与Mysql、PostgreSQL相比，sqlite的处理速度更快。它的使用非常简单，无需安装和管理。一个完整的 sqlite 数据库是存储在一个单一的跨平台的磁盘文件，简单的说一个数据库就是一个单一文件。SQLite虽然很小巧，但是支持的SQL语句不会逊色于其他开源数据库，它支持的大多数的SQL语句。目前最新的版本是sqlite3。</p><h4 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程"></a>安装流程</h4><p><a href="https://www.sqlite.org/download.html" target="_blank" rel="noopener">下载地址</a></p><h5 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h5><blockquote><p>1.下载 sqlite-tools-win32-<em>.zip 和 sqlite-dll-win32-</em>.zip 压缩文件<br>2.解压上面两个压缩文件，将得到 sqlite3.def、sqlite3.dll 和 sqlite3.exe 文件<br>3添加 PATH 环境变量</p></blockquote><h5 id="linux-MacOS"><a href="#linux-MacOS" class="headerlink" title="linux/MacOS"></a>linux/MacOS</h5><p>&emsp;&emsp;目前linux 操作系统都附带 sqlite，可以使用命令：sqlite3 来检查机器上是否已经安装了 SQLite。<br>&emsp;&emsp;万一没安装，可以下载sqlite-autoconf-*.tar.gz解压安装<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$tar xvfz sqlite-autoconf-3071502.tar.gz</span><br><span class="line">$cd sqlite-autoconf-3071502</span><br><span class="line">$./configure --prefix=/usr/local</span><br><span class="line">$make</span><br><span class="line">$make install</span><br></pre></td></tr></table></figure><p></p><h4 id="Java集成sqlite"><a href="#Java集成sqlite" class="headerlink" title="Java集成sqlite"></a>Java集成sqlite</h4><p>&emsp;&emsp;相对于mysql来说，在项目中使用sqlite的好处在于可以省去外部mysql的配置安装，直接将sqlite数据库的单一文件放在项目里一起打包过去，或者直接指定机器磁盘上的某个位置生成数据库文件。<br>在java项目中内嵌sqlite很简单，无需手动安装数据库。对于springboot项目，只需要引入sqlite-jdbc 和 spring-boot-starter-jdbc依赖即可。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.xerial&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;sqlite-jdbc&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.21.0.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p></p><p>简单封装的数据库工具类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqliteUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger( SqliteUtils.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String dbFilePath;</span><br><span class="line">    <span class="keyword">private</span> Connection connection;</span><br><span class="line">    <span class="keyword">private</span> Statement statement;</span><br><span class="line">    <span class="keyword">private</span> ResultSet resultSet;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassNotFoundException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SqliteUtils</span><span class="params">(String dbFilePath)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dbFilePath=dbFilePath;</span><br><span class="line">        connection = getConnection(dbFilePath);</span><br><span class="line">        logger.info( dbFilePath+<span class="string">" connected successful"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取数据库连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dbFilePath db文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数据库连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassNotFoundException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">(String dbFilePath)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//sqlite在进行连接时，若找不到数据库，会自动在对应目录创建一个db文件。</span></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Class.forName(<span class="string">"org.sqlite.JDBC"</span>);</span><br><span class="line">        conn = DriverManager.getConnection(<span class="string">"jdbc:sqlite:"</span> + dbFilePath);</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行sql查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql sql select 语句</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rse 结果集处理类对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 查询结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassNotFoundException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">executeQuery</span><span class="params">(String sql, ResultSetExtractor&lt;T&gt; rse)</span> <span class="keyword">throws</span> SQLException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            resultSet = getStatement().executeQuery(sql);</span><br><span class="line">            T rs = rse.extractData(resultSet);</span><br><span class="line">            <span class="keyword">return</span> rs;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            destroyed();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行select查询，返回结果列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql sql select 语句  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rm 结果集的行数据处理类对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassNotFoundException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">executeQuery</span><span class="params">( String sql, RowMapper&lt;T&gt; rm)</span> <span class="keyword">throws</span> SQLException, ClassNotFoundException </span>&#123;</span><br><span class="line">        List&lt;T&gt; rsList = <span class="keyword">new</span> ArrayList&lt;T&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            resultSet = getStatement().executeQuery(sql);</span><br><span class="line">            <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">                rsList.add(rm.mapRow(resultSet, resultSet.getRow()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            destroyed();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rsList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行数据库更新sql语句</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 更新行数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassNotFoundException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">executeUpdate</span><span class="params">(String sql)</span> <span class="keyword">throws</span> SQLException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> c = getStatement().executeUpdate(sql);</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            destroyed();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行多个sql更新语句</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sqls</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassNotFoundException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeUpdate</span><span class="params">(String...sqls)</span> <span class="keyword">throws</span> SQLException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (String sql : sqls) &#123;</span><br><span class="line">                getStatement().executeUpdate(sql);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            destroyed();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行数据库更新 sql List</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sqls sql列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassNotFoundException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeUpdate</span><span class="params">(List&lt;String&gt; sqls)</span> <span class="keyword">throws</span> SQLException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (String sql : sqls) &#123;</span><br><span class="line">                getStatement().executeUpdate(sql);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            destroyed();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == connection) connection = getConnection(dbFilePath);</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Statement <span class="title">getStatement</span><span class="params">()</span> <span class="keyword">throws</span> SQLException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == statement) statement = getConnection().createStatement();</span><br><span class="line">        <span class="keyword">return</span> statement;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据库资源关闭和释放：rs-&gt;st-&gt;conn 按照顺序关闭</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroyed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != resultSet) &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">                resultSet = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != statement) &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">                statement = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != connection) &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">                connection = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            logger.error(<span class="string">"Sqlite 数据库关闭时异常"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="连接测试"><a href="#连接测试" class="headerlink" title="连接测试"></a>连接测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHelper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        SqliteUtils h = <span class="keyword">new</span> SqliteUtils(<span class="string">"sqlite.db"</span>);</span><br><span class="line">        h.executeUpdate(<span class="string">"drop table if exists user;"</span>);</span><br><span class="line">        h.executeUpdate(<span class="string">"create table user(name varchar(20),desc TEXT);"</span>);</span><br><span class="line">        h.executeUpdate(<span class="string">"insert into user (name) values('zhangsan');"</span>);</span><br><span class="line">        h.executeUpdate(<span class="string">"insert into user (name) values('lisi');"</span>);</span><br><span class="line">        h.executeUpdate(<span class="string">"insert into user (name) values('wangwu');"</span>);</span><br><span class="line">        List&lt;String&gt; sList = h.executeQuery(<span class="string">"select name from user"</span>, <span class="keyword">new</span> RowMapper&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">mapRow</span><span class="params">( ResultSet rs, <span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function">                    <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> rs.getString(<span class="string">"name"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span>(String s:sList)&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;连接的时候首先会去检测是否存在数据库文件，不存在则自动创建sqlite.db文件，所以无需手动创建db文件。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Jul 12 2019 16:40:24 GMT+0800 (China Standard Time) --&gt;&lt;h4 id=&quot;sqlite是啥？&quot;&gt;&lt;a href=&quot;#sqlite是啥？&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="Java" scheme="https://github.com/lsfst/lsfst.github.io/categories/Java/"/>
    
    
      <category term="java" scheme="https://github.com/lsfst/lsfst.github.io/tags/java/"/>
    
      <category term="sqlite" scheme="https://github.com/lsfst/lsfst.github.io/tags/sqlite/"/>
    
  </entry>
  
  <entry>
    <title>windows下SkyWalking分布式链路跟踪系统踩坑记录</title>
    <link href="https://github.com/lsfst/lsfst.github.io/2018/12/11/windowsSkyWalking/"/>
    <id>https://github.com/lsfst/lsfst.github.io/2018/12/11/windowsSkyWalking/</id>
    <published>2018-12-10T16:00:00.000Z</published>
    <updated>2019-03-12T15:53:27.257Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 12 2019 16:40:24 GMT+0800 (China Standard Time) --><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>&emsp;&emsp;SkyWalking 是一个针对分布式系统的 APM 系统，也被称为分布式追踪系统。<br>&emsp;&emsp;skywalaking总体架构分为三部分：</p><blockquote><p>&emsp;&emsp;skywalking-collector：链路数据收集器，数据可以落地ElasticSearch，单机也可以落地H2，但不推荐<br>&emsp;&emsp;skywalking-web：web可视化平台，用来展示落地的数据<br>&emsp;&emsp;skywalking-agent：探针，用来收集和发送数据到归集器</p></blockquote><p>&emsp;&emsp;当然，实际上部署起来其实很简单，不需要了解原理就可以正常使用。</p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><h4 id="安装ElasticSearch"><a href="#安装ElasticSearch" class="headerlink" title="安装ElasticSearch"></a>安装ElasticSearch</h4><p>&emsp;&emsp;必须选择5.X版本的ElasticSearch<a href="https://www.elastic.co/downloads/past-releases" target="_blank" rel="noopener">下载</a>,最新的6.X以上的版本暂不兼容(文档没看仔细，在这浪费了不少时间)，同时要求JDK8+</p><h4 id="下载SkyWalking安装包"><a href="#下载SkyWalking安装包" class="headerlink" title="下载SkyWalking安装包"></a>下载SkyWalking安装包</h4><p>&emsp;&emsp;获取Apache的最新发布的稳定版本或者下载github上面的源码在稳定版本的tag上进行编译，我选择的是5.0的版本<a href="https://github.com/apache/incubator-skywalking/releases">下载</a>，解压后目录结构如下：</p><p></p><div align="center"><img src="/2018/12/11/windowsSkyWalking/1.png" title="版本"></div><br><br><p></p><h4 id="配置修改"><a href="#配置修改" class="headerlink" title="配置修改"></a>配置修改</h4><p>ElasticSearch:</p><figure class="highlight java"><figcaption><span>config/elasticsearch.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 修改 </span><br><span class="line"># 如果 cluster.name 不设置为 CollectorDBCluster ，则需要修改 SkyWalking 的配置文件 </span><br><span class="line">cluster.name: CollectorDBCluster </span><br><span class="line">network.host: <span class="number">0.0</span>.0.0 </span><br><span class="line"># 增加 </span><br><span class="line">thread_pool.bulk.queue_size: <span class="number">1000</span></span><br></pre></td></tr></table></figure><p>skywalking:<br>config/application.yml :<br></p><div align="center"><img src="/2018/12/11/windowsSkyWalking/2.png" title="版本"></div><br><br><p></p><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><p>&emsp;&emsp;运行bin 目录下的start.sh/start.bat脚本，会同时启动Collector和Web UI。访问localhost:8080，可以进入web页面，默认账号密码都是admin，具体可以在webapp.yml配置。遇到下面错误可参考解决方法：</p><blockquote><p>服务器500：多半是配置上的问题，可能是collector未正常连接，先去logs目录下查看对应日志；</p><p>找不到Collector：检查下webapp/webapp.yml 中collector.ribbon.listOfServers 配置的地址是否正确;</p><p>找不到9200端口：可能是config/application.yml中ElasticSearch节点配置不正确，Elastic启动时会启动两个端口，9300是tcp通讯端口，集群间和TCPClient都走的它，9200是http协议的RESTful接口，这里应该配置9300端口.</p></blockquote><h4 id="Agent探针"><a href="#Agent探针" class="headerlink" title="Agent探针"></a>Agent探针</h4><p>&emsp;&emsp;拷贝apache-skywalking-apm-incubating目录下的agent目录到应用程序位置，探针包含整个目录，不要改变目录结构；java程序启动时，增加JVM启动参数，-javaagent:/path/to/agent/skywalking-agent.jar。参数值为skywalking-agent.jar的绝对路径<br></p><div align="center"><img src="/2018/12/11/windowsSkyWalking/3.png" title="版本"></div><br><br><p></p><p>&emsp;&emsp;同时修改agent.config配置中的agent.application_code为要监控的应用的名字，其他默认即可。<br></p><div align="center"><img src="/2018/12/11/windowsSkyWalking/4.png" title="版本"></div><br><br><p></p><p>&emsp;&emsp;最后启动应用<br></p><div align="center"><img src="/2018/12/11/windowsSkyWalking/5.png" title="版本"></div><br><br><p></p><h3 id="elasticsearch-head"><a href="#elasticsearch-head" class="headerlink" title="elasticsearch-head"></a>elasticsearch-head</h3><p>&emsp;&emsp;elasticsearch-head是一个ElasticSearch的可视化监控插件，可以用来监视ElasticSearch运行情况，安装起来很简单，但是需要安装Node环境。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone git://github.com/mobz/elasticsearch-head.git</span><br><span class="line">cd elasticsearch-head</span><br><span class="line">npm install</span><br><span class="line">npm run start</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>&emsp;&emsp;然后打开 <a href="http://localhost:9100/" target="_blank" rel="noopener">http://localhost:9100/</a> 就能看到ElasticSearch节点信息了<br></p><div align="center"><img src="/2018/12/11/windowsSkyWalking/6.png" title="版本"></div><br><br><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Jul 12 2019 16:40:24 GMT+0800 (China Standard Time) --&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h
      
    
    </summary>
    
      <category term="Java" scheme="https://github.com/lsfst/lsfst.github.io/categories/Java/"/>
    
    
      <category term="java" scheme="https://github.com/lsfst/lsfst.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>海量数据与BitSet</title>
    <link href="https://github.com/lsfst/lsfst.github.io/2018/11/12/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E4%B8%8EBitSet/"/>
    <id>https://github.com/lsfst/lsfst.github.io/2018/11/12/海量数据与BitSet/</id>
    <published>2018-11-11T16:00:00.000Z</published>
    <updated>2019-03-12T17:10:45.354Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 12 2019 16:40:24 GMT+0800 (China Standard Time) --><blockquote><p>现在有五十亿个int类型的正整数，从中找出重复的数并返回。</p></blockquote><p>&emsp;&emsp;这种问题，首先想到的就是内存问题。50亿个int数，一共约占用4*50亿字节=20G内存，对于一般机器来说一次性加载进内存基本是不可能的。<br>&emsp;&emsp;因为数据量较大，如果采取遍历，那时间复杂度也需要考虑。所有数都是int类型，可以考虑用一个int数组接收所有值，把int正整数n作为数组下标，如果n存在，则对应的值为1，如果不存在，对应的值为0。例如数组arr[n] = 1，表示n存在，arr[n] = 0表示n不存在。由于int非负整数一共有 2^31 个，所以数组的大小需要 2^32 （约21亿）这么大。这样的话，只需要一次遍历，就可以找出所有重复的数了。这样的话，2^32的int数组，其所需内存大约是8G。<br>&emsp;&emsp;问题只需要找出重复值，不需要统计各重复值个数，所以这个int数组可以用boolean数组代替。<br>&emsp;&emsp;《Java虚拟机规范》虽然定义了boolean这种类型，但只对它提供了非常有限的支持。在Java虚拟机中没有任何供boolean值专用的字节码指令，Java语言表达式所操作的boolean值，在编译之后都使用Java虚拟机中的int数据类型来代替，而boolean数组将会被编码成Java虚拟机的byte数组，每个元素boolean元素占8位。也就是说，一个boolean值占用内存4个字节的空间；但一个boolean数组中的每一个值占用内存1个字节的空间。这样子，将int数组转换成boolean数组，占用内存可以下降到原来四分之一，也就是2G内存。即使这样，内存要求还是太大了。<br>&emsp;&emsp;虽然boolean是表示两种状态，但是boolean实际上占用了8bit，按道理8bit是可以表示128种状态的，但现在只能表示两种状态，还是太浪费了。既然这样，不如再大胆一点，直接用一个字节表示状态。</p><h3 id="BitMap算法"><a href="#BitMap算法" class="headerlink" title="BitMap算法"></a>BitMap算法</h3><p>&emsp;&emsp;用1位来表示一个数据是否出现过，0为没有出现过，1表示出现过。使用的时候可以根据某一个位是否为0表示此数是否出现过，这种算法称做bitmap算法。JDK中的BitSet集合对是就是对Bitmap的相对简单的实现</p><h3 id="Java中BitSet实现"><a href="#Java中BitSet实现" class="headerlink" title="Java中BitSet实现"></a>Java中BitSet实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BitSet</span> <span class="keyword">implements</span> <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> ADDRESS_BITS_PER_WORD = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> BITS_PER_WORD = <span class="number">1</span> &lt;&lt; ADDRESS_BITS_PER_WORD;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> BIT_INDEX_MASK = BITS_PER_WORD - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> WORD_MASK = <span class="number">0xffffffffffffffffL</span>;</span><br><span class="line"><span class="comment">//bitset的内部实现是long数组</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span>[] words;</span><br><span class="line"><span class="comment">//bitSet当前word数，也即words长度</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> wordsInUse = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BitSet默认的是一个long整形的大小</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BitSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    initWords(BITS_PER_WORD);</span><br><span class="line">    sizeIsSticky = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BitSet</span><span class="params">(<span class="keyword">int</span> nbits)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// nbits can't be negative; size 0 is OK</span></span><br><span class="line">    <span class="keyword">if</span> (nbits &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NegativeArraySizeException(<span class="string">"nbits &lt; 0: "</span> + nbits);</span><br><span class="line"></span><br><span class="line">    initWords(nbits);</span><br><span class="line">    sizeIsSticky = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//初始化words</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initWords</span><span class="params">(<span class="keyword">int</span> nbits)</span> </span>&#123;</span><br><span class="line">    words = <span class="keyword">new</span> <span class="keyword">long</span>[wordIndex(nbits-<span class="number">1</span>) + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据bit数计算对应word数，右移6位</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">wordIndex</span><span class="params">(<span class="keyword">int</span> bitIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> bitIndex &gt;&gt; ADDRESS_BITS_PER_WORD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//私有构造</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">BitSet</span><span class="params">(<span class="keyword">long</span>[] words)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.words = words;</span><br><span class="line">    <span class="keyword">this</span>.wordsInUse = words.length;</span><br><span class="line">    checkInvariants();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;BitSet的底层实现是使用long数组作为内部存储结构的，这就决定了BitSet的大小为long类型大小(64位)的整数倍。long数组的每一个元素都可以当做是64位的二进制数，也是整个BitSet的子集。在BitSet中把这些子集叫做Word。<br>&emsp;&emsp;BitSet对外提供了两个公有构造函数，一个无参，默认的初始大小为64bit，另一个构造函数带一个int型参数用于指定大小。默认情况下，每个位的默认值为false(0)。</p><h3 id="BitSet的基本操作"><a href="#BitSet的基本操作" class="headerlink" title="BitSet的基本操作"></a>BitSet的基本操作</h3><p>&emsp;&emsp;BitSet对数据的基本操作都是通过位操作来实现的。set()方法是其中的核心。当要增加一个元素时，修改该元素在BitSet中的对应位值为1；当要删除一个元素时，修改该元素在BitSet中的对应位值为0。</p><h4 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> bitIndex, <span class="keyword">boolean</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value)</span><br><span class="line">        set(bitIndex);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        clear(bitIndex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> bitIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bitIndex &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"bitIndex &lt; 0: "</span> + bitIndex);</span><br><span class="line">    <span class="comment">//获取所在下标</span></span><br><span class="line">    <span class="keyword">int</span> wordIndex = wordIndex(bitIndex);</span><br><span class="line">    expandTo(wordIndex);</span><br><span class="line">    <span class="comment">//与</span></span><br><span class="line">    words[wordIndex] |= (<span class="number">1L</span> &lt;&lt; bitIndex); <span class="comment">// Restores invariants</span></span><br><span class="line"></span><br><span class="line">    checkInvariants();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;举个栗子，我们要添加一个值n=84。<br>&emsp;&emsp;先找到n在words数组中的下标index，index = 1。然后再找到n在words[index]中的位置position，这里position = 84%64=20。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">index = n / <span class="number">64</span> = n &gt;&gt; <span class="number">6</span>。</span><br><span class="line">position = n % <span class="number">64</span> = n &amp; <span class="number">0x40</span>。</span><br></pre></td></tr></table></figure><br>&emsp;&emsp;接下来我们把1向←移动position个二进制位，然后把所得的结果和arr[index]做“或(or)”操作就可以了（位移超过64位溢出自动舍弃，1&lt;&lt;65=1&lt;&lt;1），所以对于long类型组成的words[]来说，position的位置可以不用计算：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">words[wordIndex] |= (<span class="number">1L</span> &lt;&lt; n)</span><br></pre></td></tr></table></figure><br>&emsp;&emsp;除此之外，添加元素时还要考虑数组扩容问题:基础扩容倍数是2，扩容后的数组大小取2*当前数组大小与所需大小的最大值。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">expandTo</span><span class="params">(<span class="keyword">int</span> wordIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> wordsRequired = wordIndex+<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">if</span> (wordsInUse &lt; wordsRequired) &#123;</span><br><span class="line">        ensureCapacity(wordsRequired);</span><br><span class="line">        wordsInUse = wordsRequired;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> wordsRequired)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (words.length &lt; wordsRequired) &#123;</span><br><span class="line">        <span class="comment">// Allocate larger of doubled size or required size</span></span><br><span class="line">        <span class="keyword">int</span> request = Math.max(<span class="number">2</span> * words.length, wordsRequired);</span><br><span class="line">        words = Arrays.copyOf(words, request);</span><br><span class="line">        sizeIsSticky = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除某个数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">(<span class="keyword">int</span> bitIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bitIndex &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"bitIndex &lt; 0: "</span> + bitIndex);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> wordIndex = wordIndex(bitIndex);</span><br><span class="line">    <span class="keyword">if</span> (wordIndex &gt;= wordsInUse)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    words[wordIndex] &amp;= ~(<span class="number">1L</span> &lt;&lt; bitIndex);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重新计算数组大小</span></span><br><span class="line">    recalculateWordsInUse();</span><br><span class="line">    checkInvariants();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recalculateWordsInUse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Traverse the bitset until a used word is found</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = wordsInUse-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="keyword">if</span> (words[i] != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    wordsInUse = i+<span class="number">1</span>; <span class="comment">// The new logical size</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//清空所有数据</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (wordsInUse &gt; <span class="number">0</span>)</span><br><span class="line">            words[--wordsInUse] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;只需要把对应的二进制的1变成0即可，把1←移后的结果取反，然后与arr[index]做“与”操作，每次删除后会重新计算数组大小。</p><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> bitIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bitIndex &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"bitIndex &lt; 0: "</span> + bitIndex);</span><br><span class="line"></span><br><span class="line">    checkInvariants();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> wordIndex = wordIndex(bitIndex);</span><br><span class="line">    <span class="keyword">return</span> (wordIndex &lt; wordsInUse)</span><br><span class="line">        &amp;&amp; ((words[wordIndex] &amp; (<span class="number">1L</span> &lt;&lt; bitIndex)) != <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;计算出要查询的数对应words数组中的index，把1←移后，将结果和words[index]做“与”操作，如果结果不为0，则证明存在，否则就不存在</p><h4 id="反转"><a href="#反转" class="headerlink" title="反转"></a>反转</h4><p>把某一位的1变成0，0变成1，是一个与1的异或(^)运算的操作<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flip</span><span class="params">(<span class="keyword">int</span> bitIndex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (bitIndex &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"bitIndex &lt; 0: "</span> + bitIndex);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">int</span> wordIndex = wordIndex(bitIndex);</span><br><span class="line">        expandTo(wordIndex);</span><br><span class="line"> </span><br><span class="line">        words[wordIndex] ^= (<span class="number">1L</span> &lt;&lt; bitIndex);</span><br><span class="line"> </span><br><span class="line">        recalculateWordsInUse();</span><br><span class="line">        checkInvariants();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p></p><p>除此之外名，BitSet的新增，清空，查询，反转都提供了批量操作指定范围数据的方法</p><h3 id="BitSet的优缺点"><a href="#BitSet的优缺点" class="headerlink" title="BitSet的优缺点"></a>BitSet的优缺点</h3><p>优点</p><pre><code>1. 运算效率高，不进行比较和移位；2. 占用内存少，比如最大的数MAX=10000000；只需占用内存为MAX/8=1250000Byte=1.25M。</code></pre><p>缺点</p><pre><code>1. 所有的数据不能重复，即不可对重复的数据进行排序。（少量重复数据查找还是可以的，用2-bitmap）。2. 当数据类似（1，1000，10万）只有3个数据的时候，用bitmap时间复杂度和空间复杂度相当大，只有当数据比较密集时才有优势。</code></pre><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>回到先前的问题，五十亿个int类型的正整数，从中找出重复的数，采用bitSet存储的话，所需内存可以降到int数组的1/32，也即250M左右的内存空间即可满足要求。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;Integer&gt; <span class="title">getRepeats</span><span class="params">( <span class="keyword">int</span> arr[])</span></span>&#123;</span><br><span class="line">    <span class="comment">//将重复的值存进set，防止返回重复的数</span></span><br><span class="line">    Set&lt;Integer&gt; set=<span class="keyword">new</span> HashSet&lt;&gt;(  );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//BitSet 双倍扩容机制</span></span><br><span class="line">    BitSet bitSet=<span class="keyword">new</span> BitSet( Integer.MAX_VALUE );</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length ;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> value=arr[i];</span><br><span class="line">        <span class="comment">//判断该数是否存在bitSet里，这样一次遍历即可得出结果</span></span><br><span class="line">        <span class="keyword">if</span>(bitSet.get( value ))&#123;</span><br><span class="line">            set.add( value );</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            bitSet.set(value, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> set;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="相关问题："><a href="#相关问题：" class="headerlink" title="相关问题："></a>相关问题：</h3><blockquote><p>&emsp;&emsp;给40亿个不重复的unsigned int的整数，没排过序的，然后再给一个数，如何快速判断这个数是否在那40亿个数当中？<br>&emsp;&emsp;usinged int只有接近43亿数，用BitSet存储的话只需要0.5G内存，一个bit位代表一个unsigned int值，读入40亿个数，设置相应的bit位；读入要查询的数，查看相应bit位是否为1，为1表示存在，为0表示不存在。<br>&emsp;&emsp;当然，其实这里还有优化空间，可以考虑去存储那不存在的接近3亿数。一般来说，存储3亿数所需空间是小于存储40亿数据所需空间的，不过这需要先遍历找出这3亿数中的最大值与最小值，所以会增加时间复杂度。</p></blockquote><blockquote><p>&emsp;&emsp;已知某个文件内包含一些电话号码，每个号码为8位数字，统计不同号码的个数。<br>&emsp;&emsp;8位最多99 999 999，大概需要99m个bit，大概10几M字节的内存即可。 （可以理解为从0-99 999 999的数字，每个数字对应一个bit位，所以只需要99M个bit==1.2MBytes，这样，就用了小小的1.2M左右的内存表示了所有的8位数的电话）</p></blockquote><blockquote><p>&emsp;&emsp;大数据量无重复数排序：位图法<br>&emsp;&emsp;大数据量有重复数排序：如果只有少量重复次数，可以将BitSet进行扩展，比如用两个bit位表示一个数，一位表示存在与否，一位表示重复次数（但仅限2次以内）</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Jul 12 2019 16:40:24 GMT+0800 (China Standard Time) --&gt;&lt;blockquote&gt;&lt;p&gt;现在有五十亿个int类型的正整数，从中找出重复的数并返回。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&amp;
      
    
    </summary>
    
      <category term="Java" scheme="https://github.com/lsfst/lsfst.github.io/categories/Java/"/>
    
    
      <category term="java" scheme="https://github.com/lsfst/lsfst.github.io/tags/java/"/>
    
      <category term="算法" scheme="https://github.com/lsfst/lsfst.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>ElementUI + vue 定制一个表格插件</title>
    <link href="https://github.com/lsfst/lsfst.github.io/2018/11/11/element-vue-table/"/>
    <id>https://github.com/lsfst/lsfst.github.io/2018/11/11/element-vue-table/</id>
    <published>2018-11-11T02:01:22.000Z</published>
    <updated>2019-03-31T12:25:13.570Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 12 2019 16:40:24 GMT+0800 (China Standard Time) --><p>&emsp;&emsp;公司后台管理系统有很多表格页面，分别对应数据库不同的表。整个后台UI使用的是Element UI，Element UI的表格功能很强大，但是如果拿来直接用，会产生大量的模板代码，再加上各种个性化功能和自定义配置，一个一个写起来既麻烦又难看。<br>&emsp;&emsp;正是基于此才需要对表格进行封装，希望达到的效果如下:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tableList: [</span><br><span class="line">    &#123;name: &apos;keyID&apos;, width: &#123;length: 100&#125;,sort:true,show: true&#125;,</span><br><span class="line">    &#123;name: &apos;Type&apos;,show:true,width:&#123;length:150&#125;,format:&#123;comData:cdrTypeKeyValue&#125;&#125;,</span><br><span class="line">    &#123;name: &apos;dataTraffic&apos;,format:&#123;trafficFM:true&#125;, sort:true,type:&quot;tag&quot;,tagData:function(value)&#123;</span><br><span class="line">        return value&gt; 0 ? (value&lt;1000000?&quot;info&quot;:&quot;warning&quot;) : &quot;danger&quot;;</span><br><span class="line">    &#125;,width: &#123;length: 160&#125;,show: true&#125;,</span><br><span class="line">    &#123;name: &apos;crtTm&apos;, show: true,type:&apos;date&apos;,width: &#123;length: 200&#125;&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p></p><p>在创建一个新的表格页面时，只需要利用如上的表格字段配置就可以完成渲染，增删查改，排序，自定义样式等大部分工作。<br>当然，这种模板是比较特性化的，主要根据具体业务而定。</p><h3 id="表格组件"><a href="#表格组件" class="headerlink" title="表格组件"></a>表格组件</h3><figure class="highlight js"><figcaption><span>simpleTableTemplate.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;template xmlns:v-bind=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">    &lt;el-table</span><br><span class="line">            v-loading=<span class="string">"listLoading"</span></span><br><span class="line">            element-loading-text=<span class="string">"拼命加载中"</span></span><br><span class="line">            element-loading-background=<span class="string">"rgba(0, 0, 0, 0.8)"</span></span><br><span class="line">            ref=<span class="string">"elTable"</span></span><br><span class="line">            :data=<span class="string">"computedLists"</span></span><br><span class="line">            @select=<span class="string">"selectionChange"</span></span><br><span class="line">            @select-all=<span class="string">"selectionAll"</span></span><br><span class="line">            @row-click=<span class="string">"clickRow"</span></span><br><span class="line">            max-height=<span class="string">"700"</span></span><br><span class="line">            highlight-current-row</span><br><span class="line">            style=<span class="string">"width: 100%;"</span></span><br><span class="line">            :row-<span class="class"><span class="keyword">class</span>-<span class="title">name</span></span>=<span class="string">"tableRowClassName"</span></span><br><span class="line">    &gt;</span><br><span class="line"></span><br><span class="line">  &lt;el-table-column</span><br><span class="line">                v-<span class="keyword">if</span>=<span class="string">"check"</span></span><br><span class="line">                fixed=<span class="string">"left"</span></span><br><span class="line">                :prop=<span class="string">"tableKey"</span></span><br><span class="line">                type=<span class="string">"selection"</span></span><br><span class="line">                width=<span class="string">"35"</span>&gt;</span><br><span class="line">        &lt;<span class="regexp">/el-table-column&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;template v-for="item in columnList"&gt;</span></span><br><span class="line"><span class="regexp">        </span></span><br><span class="line"><span class="regexp">            &lt;el-table-column v-if="item.sort"  :width="item.width.length" align="center" :label="$t(prefix+item.name)" :render-header="(h,obj,index) =&gt; renderSort(h,obj,index,item.name)"&gt;</span></span><br><span class="line"><span class="regexp">                &lt;template slot-scope="scope"&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;i v-if="item.type=='date'" class="el-icon-time"&gt;&lt;/i</span>&gt;</span><br><span class="line">                    &lt;span v-<span class="keyword">if</span>=<span class="string">"item.type=='html'"</span> v-html=<span class="string">"scope.row.showData[item.name]"</span>&gt;&lt;/span&gt;</span><br><span class="line">                    &lt;el-tooltip v-<span class="keyword">else</span>-<span class="keyword">if</span>=<span class="string">"item.type=='tip'"</span> placement=<span class="string">"top"</span>&gt;</span><br><span class="line">                        &lt;div slot=<span class="string">"content"</span> v-html=<span class="string">"scope.row.showData.tips[item.name]"</span>&gt;&lt;/div&gt;</span><br><span class="line">                        &lt;span v-html=<span class="string">"scope.row.showData[item.name]"</span>&gt;&lt;/span&gt;</span><br><span class="line">                    &lt;<span class="regexp">/el-tooltip&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;span v-else-if="item.type=='date'" v-text="scope.row.showData[item.name]"&gt;&lt;/</span>span&gt;</span><br><span class="line">                    &lt;el-tag v-<span class="keyword">else</span>-<span class="keyword">if</span>=<span class="string">"item.type=='tag'"</span> :type=<span class="string">"scope.row.showData.tags[item.name]"</span> :style=<span class="string">"item.style"</span>&gt;&lt;/el-tag&gt;</span><br><span class="line">                    &lt;span v-else  v-text="scope.row.showData[item.name]"&gt;&lt;/span&gt;</span><br><span class="line">                &lt;/template&gt;</span><br><span class="line">            &lt;<span class="regexp">/el-table-column&gt;</span></span><br><span class="line"><span class="regexp">            &lt;el-table-column v-else  :width="item.width.length" align="center" :label="$t(prefix+item.name)"&gt;</span></span><br><span class="line"><span class="regexp">                &lt;template slot-scope="scope"&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;i v-if="item.type=='date'" class="el-icon-time"&gt;&lt;/i</span>&gt;</span><br><span class="line">                    &lt;span v-<span class="keyword">if</span>=<span class="string">"item.type=='html'"</span> v-html=<span class="string">"scope.row.showData[item.name]"</span>&gt;&lt;/span&gt;</span><br><span class="line">                    &lt;el-tooltip v-<span class="keyword">else</span>-<span class="keyword">if</span>=<span class="string">"item.type=='tip'"</span> placement=<span class="string">"top"</span>&gt;</span><br><span class="line">                        &lt;div slot=<span class="string">"content"</span> v-html=<span class="string">"scope.row.showData.tips[item.name]"</span>&gt;&lt;/div&gt;</span><br><span class="line">                        &lt;span v-html=<span class="string">"scope.row.showData[item.name]"</span>&gt;&lt;/span&gt;</span><br><span class="line">                    &lt;<span class="regexp">/el-tooltip&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;span v-else-if="item.type=='date'" v-text="scope.row.showData[item.name]"&gt;&lt;/</span>span&gt;</span><br><span class="line">                    &lt;el-tag v-<span class="keyword">else</span>-<span class="keyword">if</span>=<span class="string">"item.type=='tag'"</span> :type=<span class="string">"scope.row.showData.tags[item.name]"</span> :style=<span class="string">"item.style"</span>&gt;&lt;/el-tag&gt;</span><br><span class="line">                    &lt;span v-else  v-text="scope.row.showData[item.name]"&gt;&lt;/span&gt;</span><br><span class="line">                &lt;/template&gt;</span><br><span class="line">            &lt;<span class="regexp">/el-table-column&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">        &lt;el-table-column type=<span class="string">"expand"</span> fixed=<span class="string">"right"</span> v-<span class="keyword">if</span>=<span class="string">"expand"</span>&gt;</span><br><span class="line">            &lt;template slot-scope=<span class="string">"props"</span>&gt;</span><br><span class="line">                &lt;el-form label-position=<span class="string">"left"</span> inline <span class="class"><span class="keyword">class</span></span>=<span class="string">"demo-table-expand"</span>&gt;</span><br><span class="line">                    &lt;el-form-item v-<span class="keyword">for</span>=<span class="string">"item in expandList"</span> :key=<span class="string">"item.name"</span> :label=<span class="string">"$t(prefix+item.name)"</span> :style=<span class="string">"item.style"</span>&gt;</span><br><span class="line">                        &lt;span v-html=<span class="string">"props.row.showData[item.name]"</span>&gt;&lt;/span&gt;</span><br><span class="line">                    &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>el-form&gt;</span><br><span class="line">            &lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>el-table-column&gt;</span><br><span class="line">      &lt;!--expand扩展框支持--&gt;</span><br><span class="line">      </span><br><span class="line">      &lt;<span class="regexp">/el-table&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    /</span>**</span><br><span class="line">     * @author lsf</span><br><span class="line">     * @<span class="built_in">Date</span> <span class="number">2018</span>/<span class="number">10</span>/<span class="number">8</span> <span class="number">18</span>:<span class="number">13</span></span><br><span class="line">     * @Description </span><br><span class="line">     * expand 在点击展开的时候才会触发，之后值会缓存起来</span><br><span class="line">     *</span><br><span class="line">     * 一个完整的table的参数列表：</span><br><span class="line">     *              param                        required           desc</span><br><span class="line">     *   :list-loading=<span class="string">"listLoading"</span></span><br><span class="line">     *   :table-key=<span class="string">"tableKey"</span>                       Y              主键</span><br><span class="line">     *   :expand=<span class="string">"expand"</span>                            N              扩展框</span><br><span class="line">     *   :check=<span class="string">"check"</span>                              N              checkbox</span><br><span class="line">     *   :prefix=<span class="string">"prefix"</span>                            Y</span><br><span class="line">     *   :table-list=<span class="string">"tableList"</span>                     Y              表格配置列表</span><br><span class="line">     *   :computed-lists=<span class="string">"computedLists"</span>             Y              处理后的查询数据</span><br><span class="line">     *   @tableRowClassName=<span class="string">"tableRowClassName"</span>      Y              row样式</span><br><span class="line">     *   @renderSort=<span class="string">"renderSort"</span>                    Y              搜索表头</span><br><span class="line">     *   @selectionAll=<span class="string">"selectionAll"</span>                N              全选事件</span><br><span class="line">     *   @selectionChange=<span class="string">"selectionChange"</span>          N              选择事件</span><br><span class="line">     *</span><br><span class="line">     *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">    export default &#123;</span></span><br><span class="line"><span class="regexp">        name:"simpleTableTemplate",</span></span><br><span class="line"><span class="regexp">        props:['tableKey','listLoading','expand','prefix','check','tableList','computedLists'],</span></span><br><span class="line"><span class="regexp">        computed: &#123;</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/从tableList提取出expandList（expand列表），columnList(表格主体)</span></span><br><span class="line"><span class="regexp">            columnList: function () &#123;</span></span><br><span class="line"><span class="regexp">                let columnList=[];</span></span><br><span class="line"><span class="regexp">                let tableList = this.tableList;</span></span><br><span class="line"><span class="regexp">                for (let i = 0; i &lt; tableList.length; i++) &#123;</span></span><br><span class="line"><span class="regexp">                    if(!tableList[i].expand &amp;&amp; !tableList[i].hide)&#123;</span></span><br><span class="line"><span class="regexp">                        columnList.push(tableList[i])</span></span><br><span class="line"><span class="regexp">                    &#125;</span></span><br><span class="line"><span class="regexp">                &#125;</span></span><br><span class="line"><span class="regexp">                return columnList</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">            expandList: function () &#123;</span></span><br><span class="line"><span class="regexp">                let expandList=[];</span></span><br><span class="line"><span class="regexp">                let tableList = this.tableList;</span></span><br><span class="line"><span class="regexp">                for (let i = 0; i &lt; tableList.length; i++) &#123;</span></span><br><span class="line"><span class="regexp">                    if(tableList[i].expand)&#123;</span></span><br><span class="line"><span class="regexp">                        expandList.push(tableList[i])</span></span><br><span class="line"><span class="regexp">                    &#125;</span></span><br><span class="line"><span class="regexp">                &#125;</span></span><br><span class="line"><span class="regexp">                return expandList</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        methods:&#123;</span></span><br><span class="line"><span class="regexp">            renderSort(h,obj,index,name)&#123; /</span><span class="regexp">/排序</span></span><br><span class="line"><span class="regexp">                return this.$parent.renderSort(h,obj,index,name)</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">            tableRowClassName(&#123;row, rowIndex&#125;)&#123; /</span><span class="regexp">/row样式</span></span><br><span class="line"><span class="regexp">                return this.$parent.tableRowClassName(&#123;row, rowIndex&#125;)</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">            selectionAll(val,row)&#123;    /</span><span class="regexp">/checkbox全选</span></span><br><span class="line"><span class="regexp">                this.$emit('selectionAll',val, row)</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">            selectionChange(val,row)&#123;</span></span><br><span class="line"><span class="regexp">                this.$emit('selectionChange',val, row)</span></span><br><span class="line"><span class="regexp">            &#125;,</span></span><br><span class="line"><span class="regexp">            clickRow(row,event,column)&#123;  /</span><span class="regexp">/点击行事件</span></span><br><span class="line"><span class="regexp">                this.$refs.elTable.toggleRowSelection(row,true;</span></span><br><span class="line"><span class="regexp">                if(this.expand)&#123;</span></span><br><span class="line"><span class="regexp">                    this.$refs.elTable.toggleRowExpansion(row)</span></span><br><span class="line"><span class="regexp">                &#125;</span></span><br><span class="line"><span class="regexp">                this.$emit('clickRow',row)</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="操作栏组件"><a href="#操作栏组件" class="headerlink" title="操作栏组件"></a>操作栏组件</h3><p>&emsp;&emsp;除了表格主体外，还需要操作栏，比如增删查改下载等，所以还需要用按钮写一个简单的操作栏组件<br></p><figure class="highlight js"><figcaption><span>operationsTemplate.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;el-button <span class="class"><span class="keyword">class</span></span>=<span class="string">"filter-item"</span> style=<span class="string">"margin-left: 10px;"</span> type=<span class="string">"primary"</span> icon=<span class="string">"el-icon-refresh"</span></span><br><span class="line">                   @click=<span class="string">"handleRefresh"</span>&gt;refresh</span><br><span class="line">        &lt;<span class="regexp">/el-button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;template  v-for="item in operations"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;el-button v-if="item=='add'" class="filter-item" style="margin-left: 10px;" type="primary" icon="el-icon-plus"</span></span><br><span class="line"><span class="regexp">                       @click="handleCreate"&gt;add</span></span><br><span class="line"><span class="regexp">            &lt;/</span>el-button&gt;</span><br><span class="line">            &lt;el-button v-<span class="keyword">if</span>=<span class="string">"item=='edit'"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"filter-item"</span> style=<span class="string">"margin-left: 10px;"</span> type=<span class="string">"primary"</span> icon=<span class="string">"el-icon-edit"</span> :disabled=<span class="string">"editDisable"</span></span><br><span class="line">                        @click=<span class="string">"handleUpdate"</span>&gt;edit</span><br><span class="line">            &lt;<span class="regexp">/el-button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;el-button v-if="item=='remove'" class="filter-item" style="margin-left: 10px;" type="danger" icon="el-icon-delete" :disabled="deleteDisable"</span></span><br><span class="line"><span class="regexp">                        @click="handleDelete"&gt;delete</span></span><br><span class="line"><span class="regexp">            &lt;/</span>el-button&gt;</span><br><span class="line">            &lt;el-button v-<span class="keyword">if</span>=<span class="string">"item=='download'"</span> v-waves :loading=<span class="string">"downloadLoading"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"filter-item"</span> type=<span class="string">"primary"</span> icon=<span class="string">"el-icon-download"</span></span><br><span class="line">                       @click=<span class="string">"handleDownload"</span>&gt;<span class="keyword">export</span></span><br><span class="line">            &lt;<span class="regexp">/el-button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>template&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt; </span><br><span class="line">    <span class="comment">//操作栏：刷新查询（所有的表格都有），新增，编辑，修改，删除，导出</span></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        name:<span class="string">"operationsTemplate"</span>,</span><br><span class="line">        props:[<span class="string">'operations'</span>,<span class="string">'downloadLoading'</span>,<span class="string">'deleteDisable'</span>,<span class="string">'editDisable'</span>],</span><br><span class="line">        methods:&#123;</span><br><span class="line">            handleRefresh()&#123;</span><br><span class="line">                <span class="keyword">this</span>.$emit(<span class="string">'handleRefresh'</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            handleCreate()&#123;</span><br><span class="line">                <span class="keyword">this</span>.$emit(<span class="string">'handleCreate'</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            handleUpdate()&#123;</span><br><span class="line">                <span class="keyword">this</span>.$emit(<span class="string">'handleUpdate'</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            handleDelete()&#123;</span><br><span class="line">                <span class="keyword">this</span>.$emit(<span class="string">'handleDelete'</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            handleDownload()&#123;</span><br><span class="line">                <span class="keyword">this</span>.$emit(<span class="string">'handleDownload'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br></pre></td></tr></table></figure><p></p><h3 id="组成实例"><a href="#组成实例" class="headerlink" title="组成实例"></a>组成实例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"app-container"</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"filter-container"</span>&gt;</span><br><span class="line">                &lt;el-col :span=<span class="string">"6"</span>&gt;</span><br><span class="line">                    &lt;el-input :placeholder=<span class="string">"$t('table.vid')"</span> v-model=<span class="string">"listQuery.vid"</span></span><br><span class="line">                              clearable</span><br><span class="line">                              prefix-icon=<span class="string">"el-icon-search"</span> style=<span class="string">"width: 90%;"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"filter-item"</span>/&gt;</span><br><span class="line">                &lt;<span class="regexp">/el-col&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">               &lt;el-col :span="6"&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;el-select v-model="listQuery.area" class="filter-item"</span></span><br><span class="line"><span class="regexp">                               :placeholder="$t('table.area')" filterable remote</span></span><br><span class="line"><span class="regexp">                               style="width:90%" clearable</span></span><br><span class="line"><span class="regexp">                               @focus="switchArea" :remote-method="remoteAreaMethod"</span></span><br><span class="line"><span class="regexp">                               :loading="selectLoading"</span></span><br><span class="line"><span class="regexp">                               clearable&gt;</span></span><br><span class="line"><span class="regexp">                        &lt;el-option v-for="item in areaOptions" :key="item.value" :label="item.label"</span></span><br><span class="line"><span class="regexp">                                   :value="item.value"/</span>&gt;</span><br><span class="line">                    &lt;<span class="regexp">/el-select&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>el-col&gt;</span><br><span class="line"></span><br><span class="line">                &lt;operationsTemplate</span><br><span class="line">                        :operations=<span class="string">"operations"</span></span><br><span class="line">                        :download-loading=<span class="string">"downloadLoading"</span></span><br><span class="line">                        @handleDownload=<span class="string">"handleDownload"</span></span><br><span class="line">                        @handleRefresh=<span class="string">"handleRefresh"</span></span><br><span class="line">                &gt;&lt;/operationsTemplate&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            &lt;simpleTableTemplate</span></span><br><span class="line"><span class="regexp">                    :list-loading="listLoading"</span></span><br><span class="line"><span class="regexp">                    :table-key="tableKey"</span></span><br><span class="line"><span class="regexp">                    :expand="expand"</span></span><br><span class="line"><span class="regexp">                    :check="check"</span></span><br><span class="line"><span class="regexp">                    :prefix="prefix"</span></span><br><span class="line"><span class="regexp">                    :table-list="tableList"</span></span><br><span class="line"><span class="regexp">                    :computed-lists="computedLists"</span></span><br><span class="line"><span class="regexp">                    @tableRowClassName="tableRowClassName"</span></span><br><span class="line"><span class="regexp">                    @renderSort="renderSort"</span></span><br><span class="line"><span class="regexp">                    @selectionAll="selectionAll"</span></span><br><span class="line"><span class="regexp">                    @selectionChange="selectionChange"</span></span><br><span class="line"><span class="regexp">            &gt;&lt;/</span>simpleTableTemplate&gt;</span><br><span class="line"></span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"pagination-container"</span>&gt;</span><br><span class="line">                &lt;el-pagination :current-page=<span class="string">"listQuery.page"</span> :page-sizes=<span class="string">"[10,20,30, 50]"</span> :page-size=<span class="string">"listQuery.limit"</span></span><br><span class="line">                               :total=<span class="string">"total"</span> background layout=<span class="string">"total, sizes, prev, pager, next, jumper"</span></span><br><span class="line">                               @size-change=<span class="string">"handleSizeChange"</span> @current-change=<span class="string">"handleCurrentChange"</span>/&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">import</span> simpleTableTemplate <span class="keyword">from</span> <span class="string">'@/views/table/simpleTableTemplate'</span></span><br><span class="line">    <span class="keyword">import</span> operationsTemplate <span class="keyword">from</span> <span class="string">'@/views/table/operationsTemplate'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//import具体方法时，必须&#123;&#125;包裹</span></span><br><span class="line">    <span class="keyword">import</span> &#123;fetch&#125; <span class="keyword">from</span> <span class="string">'@/api/cdr'</span></span><br><span class="line">    <span class="keyword">import</span> &#123;areaS2&#125; <span class="keyword">from</span> <span class="string">'@/api/select'</span></span><br><span class="line">    <span class="keyword">import</span> &#123;renderHeadSort, getList, selectionChange, selectionAll,</span><br><span class="line">    debounce,computedFmt,remoteQuery,remoteInitQuery,handleDownload</span><br><span class="line">    &#125; <span class="keyword">from</span> <span class="string">'@/utils/tableCustom'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> cdrTypeOptions = [</span><br><span class="line">        &#123;<span class="attr">key</span>: <span class="string">'N'</span>, <span class="attr">name</span>: <span class="string">'在线呼叫'</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">key</span>: <span class="string">'C'</span>, <span class="attr">name</span>: <span class="string">'落地呼叫'</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">key</span>: <span class="string">'B'</span>, <span class="attr">name</span>: <span class="string">'落地回拨'</span>&#125;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> cdrTypeKeyValue = cdrTypeOptions.reduce(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> &#123;</span><br><span class="line">        acc[cur.key] = cur.name</span><br><span class="line">        <span class="keyword">return</span> acc</span><br><span class="line">    &#125;, &#123;&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        name: <span class="string">'cdrTable'</span>,</span><br><span class="line">        components: &#123;simpleTableTemplate,operationsTemplate&#125;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                prefix:<span class="string">'table.tbCDR.'</span>,</span><br><span class="line">                tableKey: <span class="string">'keyCDRID'</span>,</span><br><span class="line">                tableList: [</span><br><span class="line">                    &#123;<span class="attr">name</span>: <span class="string">'keyCDRID'</span>, <span class="attr">width</span>: &#123;<span class="attr">length</span>: <span class="number">100</span>&#125;,<span class="attr">sort</span>:<span class="literal">true</span>,<span class="attr">show</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">                    &#123;<span class="attr">name</span>: <span class="string">'cdrType'</span>,<span class="attr">show</span>:<span class="literal">true</span>,<span class="attr">width</span>:&#123;<span class="attr">length</span>:<span class="number">150</span>&#125;,<span class="attr">format</span>:&#123;<span class="attr">comData</span>:cdrTypeKeyValue&#125;&#125;,</span><br><span class="line">                    &#123;<span class="attr">name</span>: <span class="string">'dataTraffic'</span>,<span class="attr">format</span>:&#123;<span class="attr">trafficFM</span>:<span class="literal">true</span>&#125;, <span class="attr">sort</span>:<span class="literal">true</span>,<span class="attr">type</span>:<span class="string">"tag"</span>,</span><br><span class="line">                        tagData:<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">                            <span class="keyword">return</span> value&gt; <span class="number">0</span> ? (value&lt;<span class="number">1000000</span>?<span class="string">"info"</span>:<span class="string">"warning"</span>) : <span class="string">"danger"</span>;</span><br><span class="line">                        &#125;,<span class="attr">width</span>: &#123;<span class="attr">length</span>: <span class="number">160</span>&#125;,<span class="attr">show</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">                    &#123;<span class="attr">name</span>: <span class="string">'area'</span>,  <span class="attr">show</span>: <span class="literal">true</span>,<span class="attr">width</span>: &#123;<span class="attr">length</span>: <span class="number">200</span>&#125;,<span class="attr">type</span>:<span class="string">'html'</span>,<span class="attr">format</span>:&#123;<span class="attr">areaFM</span>:<span class="literal">true</span>&#125;&#125;,</span><br><span class="line">                    &#123;<span class="attr">name</span>: <span class="string">'crtTm'</span>, <span class="attr">show</span>: <span class="literal">true</span>,<span class="attr">type</span>:<span class="string">'date'</span>,<span class="attr">width</span>: &#123;<span class="attr">length</span>: <span class="number">200</span>&#125;&#125;,</span><br><span class="line">                    &#123;<span class="attr">name</span>: <span class="string">'crtBy'</span>,  <span class="attr">expand</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">                ],</span><br><span class="line">                check: <span class="literal">false</span>,</span><br><span class="line">                expand: <span class="literal">true</span>,</span><br><span class="line">                operations: [<span class="string">'download'</span>],    <span class="comment">//操作栏操作配置</span></span><br><span class="line">                list: [],                   <span class="comment">//API接口获取的原始数据</span></span><br><span class="line">                total: <span class="literal">null</span>,</span><br><span class="line">                listLoading: <span class="literal">true</span>,</span><br><span class="line">                listQuery: &#123;                <span class="comment">//查询参数：分页，范围，排序以及其他参数</span></span><br><span class="line">                    page: <span class="number">1</span>,</span><br><span class="line">                    offset: <span class="number">0</span>,</span><br><span class="line">                    limit: <span class="number">20</span>,</span><br><span class="line">                    orderList: []</span><br><span class="line">                &#125;,</span><br><span class="line">                areaOptions:[],              <span class="comment">//用户输入条件实时查询的结果存进areaOptions（默认20条）</span></span><br><span class="line">                areaInitOptions:[],          <span class="comment">//为了减少element remote select的查询次数，选择将remote select初始（无条件）查询结果存进areaInitOptions</span></span><br><span class="line">                downloadLoading: <span class="literal">false</span>,</span><br><span class="line">                selectLoading: <span class="literal">false</span>,</span><br><span class="line">                lastDebounce: <span class="literal">undefined</span>,     <span class="comment">//节流函数：对查询频率进行限制</span></span><br><span class="line">                lastModifyTm: <span class="literal">undefined</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line">            <span class="comment">//查询并更新查询时间</span></span><br><span class="line">            <span class="keyword">this</span>.getList()</span><br><span class="line">            <span class="keyword">this</span>.lastModifyTm = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime()</span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line">            <span class="comment">//对查询的原始数据进行处理成实际展示的文本</span></span><br><span class="line">            computedLists: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> computedFmt.call(<span class="keyword">this</span>,<span class="keyword">this</span>.list,<span class="keyword">this</span>.tableList)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted()&#123;</span><br><span class="line">            <span class="comment">//remote select初次查询</span></span><br><span class="line">            remoteInitQuery.call(<span class="keyword">this</span>, areaS2,<span class="string">"area"</span>,<span class="string">"area"</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        watch: &#123;</span><br><span class="line">            <span class="comment">//watch监听搜索区用户输入，只要有变化则自动触发查询，这样子比较简单，但是这样有个小问题：搜索区有input框，select，remote select以及时间栏，</span></span><br><span class="line">            <span class="comment">//对于input框，用户每输入一个字符就会触发一次查询，这样子会导致访问次数太高，浪费网络资源。所以需要使用节流函数限制访问频率：具体设置是两秒触发一次查询</span></span><br><span class="line">            listQuery: &#123;</span><br><span class="line">                handler(curVal, oldVal)&#123;</span><br><span class="line">                    debounce.call(<span class="keyword">this</span>, <span class="number">2000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">this</span>.getList()</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;,</span><br><span class="line">                deep: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            getList() &#123;</span><br><span class="line">                getList.call(<span class="keyword">this</span>, fetch)</span><br><span class="line">            &#125;,</span><br><span class="line">            handleSizeChange(val) &#123;</span><br><span class="line">                <span class="keyword">this</span>.listQuery.limit = val</span><br><span class="line">                <span class="keyword">this</span>.listQuery.offset = (<span class="keyword">this</span>.listQuery.page - <span class="number">1</span>) * <span class="keyword">this</span>.listQuery.limit</span><br><span class="line">                <span class="keyword">this</span>.getList()</span><br><span class="line">            &#125;,</span><br><span class="line">            handleCurrentChange(val) &#123;</span><br><span class="line">                <span class="keyword">this</span>.listQuery.page = val</span><br><span class="line">                <span class="keyword">this</span>.listQuery.offset = (<span class="keyword">this</span>.listQuery.page - <span class="number">1</span>) * <span class="keyword">this</span>.listQuery.limit</span><br><span class="line">                <span class="keyword">this</span>.getList()</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//重置搜索条件</span></span><br><span class="line">            handleRefresh() &#123;</span><br><span class="line">                <span class="keyword">this</span>.listQuery = &#123;</span><br><span class="line">                    page: <span class="number">1</span>,</span><br><span class="line">                    offset: <span class="number">0</span>,</span><br><span class="line">                    limit: <span class="number">20</span>,</span><br><span class="line">                    orderList: []</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//数据导出</span></span><br><span class="line">            handleDownload() &#123;</span><br><span class="line">                <span class="keyword">const</span> tHeader = <span class="keyword">this</span>.tableList.map(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> value.name;</span><br><span class="line">                &#125;)</span><br><span class="line">                handleDownload.call(<span class="keyword">this</span>, tHeader, fetch)</span><br><span class="line">            &#125;,</span><br><span class="line">            renderSort(h, &#123;column, $index&#125;, index, name) &#123;</span><br><span class="line">                <span class="keyword">return</span> renderHeadSort.call(<span class="keyword">this</span>, h, &#123;column, $index&#125;, index, name)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//地区select框的remote查询</span></span><br><span class="line">            remoteAreaMethod(query)&#123;</span><br><span class="line">                remoteQuery.call(<span class="keyword">this</span>, areaS2,query, <span class="string">"area"</span>,<span class="string">"area"</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//select原始查询结果切换</span></span><br><span class="line">            switchArea()&#123;</span><br><span class="line">                <span class="keyword">this</span>.areaOptions = <span class="keyword">this</span>.areaInitOptions</span><br><span class="line">            &#125;,</span><br><span class="line">            selectionChange(val, row)&#123;</span><br><span class="line">                <span class="keyword">this</span>.checkedRows = val;</span><br><span class="line">            &#125;,</span><br><span class="line">            selectionAll(val, row)&#123;</span><br><span class="line">                <span class="keyword">this</span>.checkedRows = val;</span><br><span class="line">            &#125;,</span><br><span class="line">            tableRowClassName(&#123;row, rowIndex&#125;) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br></pre></td></tr></table></figure><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><h2 id="1-API"><a href="#1-API" class="headerlink" title="1.API"></a>1.API</h2><p>&emsp;&emsp;表格操作和select remote查询的api我习惯分别写在不同的的js文件中，这样方便管理，在具体需要使用时单独引用。<br>&emsp;&emsp;查询的request使用的是axios，进行了单独封装，这里就不贴代码了。<br></p><figure class="highlight js"><figcaption><span>cdr.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'@/utils/request'</span></span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">'qs'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">fetch</span>(<span class="params">query</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//直接对query操作会影响全局query</span></span><br><span class="line">    <span class="keyword">let</span> _query=<span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(query));</span><br><span class="line">    _query.orderList = <span class="built_in">JSON</span>.stringify(_query.orderList)</span><br><span class="line">    <span class="keyword">return</span> request(&#123;</span><br><span class="line">        url: <span class="string">'/api/cdr'</span>,</span><br><span class="line">        method: <span class="string">'get'</span>,</span><br><span class="line">        headers: &#123;<span class="string">'Authorization'</span>: <span class="string">"Basic YWRtaW46MTIzNDU2"</span>&#125;,</span><br><span class="line">        params: _query</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p></p><figure class="highlight js"><figcaption><span>select.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'@/utils/request'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">areaS2</span>(<span class="params">query</span>) </span>&#123;</span><br><span class="line">    query.pageSize=<span class="number">50</span></span><br><span class="line">    <span class="keyword">return</span> request(&#123;</span><br><span class="line">        url: <span class="string">'/api/select2/areaS2'</span>,</span><br><span class="line">        method: <span class="string">'get'</span>,</span><br><span class="line">        headers: &#123;<span class="string">'Authorization'</span>: <span class="string">"Basic YWRtaW46MTIzNDU2"</span>&#125;,</span><br><span class="line">        params: query</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>tableCustom.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created on 2018/9/18.</span></span><br><span class="line"><span class="comment"> * 表格相关的通用方法封装</span></span><br><span class="line"><span class="comment"> * 需要引用vue对象，call/apply 更改上下文</span></span><br><span class="line"><span class="comment"> * 总结通用属性:</span></span><br><span class="line"><span class="comment"> * tableKey-主键</span></span><br><span class="line"><span class="comment"> * list-数据列表</span></span><br><span class="line"><span class="comment"> * total-总数</span></span><br><span class="line"><span class="comment"> * listLoading-loading标识</span></span><br><span class="line"><span class="comment"> * listQuery-参数列表：通用参数&#123;page: 1,offset: 0,limit: 20,orderList: []&#125;</span></span><br><span class="line"><span class="comment"> * editDisable-编辑model显示标识</span></span><br><span class="line"><span class="comment"> * deleteDisable-删除model显示标识</span></span><br><span class="line"><span class="comment"> * checkedRows-checkbox选中列表</span></span><br><span class="line"><span class="comment"> * downloadLoading -下载loading</span></span><br><span class="line"><span class="comment"> * selectLoading  -select loading</span></span><br><span class="line"><span class="comment"> * lastDebounce   -页面查询控制：作为定时任务标识作为节流控制</span></span><br><span class="line"><span class="comment"> * lastModifyTm   -页面查询控制：记录上次查询时间作为节流控制</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* /</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">  /**</span></span><br><span class="line"><span class="comment"> * @Date 2018/9/18 17:40</span></span><br><span class="line"><span class="comment"> * @Description 查询：清空chckedRows</span></span><br><span class="line"><span class="comment"> * @param func :传入的是查询func</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getList</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.listLoading = <span class="literal">true</span></span><br><span class="line">    func(<span class="keyword">this</span>.listQuery).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> data = response.data.data;</span><br><span class="line">        <span class="keyword">this</span>.list = data.contentList</span><br><span class="line">        <span class="keyword">this</span>.total = data.totalElements</span><br><span class="line">        <span class="keyword">this</span>.checkedRows=[]</span><br><span class="line">        <span class="keyword">this</span>.listLoading = <span class="literal">false</span></span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.listLoading = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">this</span>.$notify(&#123;</span><br><span class="line">            title: <span class="keyword">this</span>.$t(<span class="string">'table.selectError'</span>),</span><br><span class="line">            message: <span class="keyword">this</span>.$t(<span class="string">'table.selectError'</span>),</span><br><span class="line">            type: <span class="string">'warning'</span>,</span><br><span class="line">            duration: <span class="number">2000</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">handleDelete</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> idList = <span class="keyword">this</span>.checkedRows.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> item.keyID || item[<span class="keyword">this</span>.tableKey] ;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">this</span>.$confirm(<span class="keyword">this</span>.$t(<span class="string">'table.deleteTips'</span>).replace(<span class="string">'&#123;&#125;'</span>,idList.length ), <span class="keyword">this</span>.$t(<span class="string">'table.tips'</span>), &#123;</span><br><span class="line">        confirmButtonText: <span class="keyword">this</span>.$t(<span class="string">'table.confirm'</span>),</span><br><span class="line">        cancelButtonText: <span class="keyword">this</span>.$t(<span class="string">'table.cancel'</span>),</span><br><span class="line">        type: <span class="string">'warning'</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        func(idList).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (response.data.code == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.$message(&#123;</span><br><span class="line">                    type: <span class="string">'success'</span>,</span><br><span class="line">                    message: <span class="keyword">this</span>.$t(<span class="string">'table.deleteSuccess'</span>)</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">this</span>.getList()</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.$message(&#123;</span><br><span class="line">                    type: <span class="string">'error'</span>,</span><br><span class="line">                    message: <span class="keyword">this</span>.$t(<span class="string">'table.deleteFailure'</span>)+<span class="string">':'</span>+response.data.reason</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.$message(&#123;</span><br><span class="line">            type: <span class="string">'info'</span>,</span><br><span class="line">            message: <span class="keyword">this</span>.$t(<span class="string">'table.deleteCancel'</span>)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatJson</span>(<span class="params">filterVal, jsonData</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> jsonData.map(<span class="function"><span class="params">v</span> =&gt;</span> filterVal.map(<span class="function"><span class="params">j</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> v[j]</span><br><span class="line">    &#125;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">handleDownload</span>(<span class="params">tHeader,func</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.downloadLoading = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">var</span> exportListQuery = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.listQuery));</span><br><span class="line">    exportListQuery.table_columns = tHeader.join(<span class="string">","</span>)</span><br><span class="line">    exportListQuery.offset = <span class="number">0</span></span><br><span class="line">    <span class="comment">//暂时限制1000条，可自由配置</span></span><br><span class="line">    exportListQuery.limit = <span class="number">1000</span></span><br><span class="line">    func(exportListQuery).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> exportData = formatJson(tHeader, response.data.data.contentList);</span><br><span class="line">        <span class="keyword">import</span></span><br><span class="line">        (<span class="string">'@/vendor/Export2Excel'</span>).then(<span class="function"><span class="params">excel</span> =&gt;</span> &#123;</span><br><span class="line">            excel.export_json_to_excel(&#123;</span><br><span class="line">                header: tHeader,</span><br><span class="line">                data: exportData,</span><br><span class="line">                filename: <span class="string">'table-list'</span></span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">this</span>.$notify(&#123;</span><br><span class="line">                title: <span class="keyword">this</span>.$t(<span class="string">'table.success'</span>),</span><br><span class="line">                message: <span class="keyword">this</span>.$t(<span class="string">'table.downLoadSuccess'</span>),</span><br><span class="line">                type: <span class="string">'success'</span>,</span><br><span class="line">                duration: <span class="number">2000</span></span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.downloadLoading = <span class="literal">false</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @Date 2018/9/29 14:35</span></span><br><span class="line"><span class="comment"> * @Param idle-间隔时间,action-方法</span></span><br><span class="line"><span class="comment"> * @Description  针对页面查询的节流函数，控制页面请求频率</span></span><br><span class="line"><span class="comment"> * queryList停止变化一段时间后才会开始更新</span></span><br><span class="line"><span class="comment"> * 改进：这个延迟时间应该仅限制连续事件的触发即可，如果距离上一次更新时间超过两秒，应该直接执行</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">debounce</span> (<span class="params">idle, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> now=(<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime()</span><br><span class="line">    <span class="keyword">let</span> ctx = <span class="keyword">this</span>, args = <span class="built_in">arguments</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.lastModifyTm || now-<span class="keyword">this</span>.lastModifyTm&gt;<span class="number">2000</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.lastModifyTm=now</span><br><span class="line">        action.apply(ctx, args)</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.lastModifyTm=now</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            clearTimeout(<span class="keyword">this</span>.lastDebounce)</span><br><span class="line">            <span class="keyword">this</span>.lastDebounce = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                action.apply(ctx, args)</span><br><span class="line">            &#125;, idle)</span><br><span class="line">        &#125;.apply(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @Date 2018/9/18 16:53</span></span><br><span class="line"><span class="comment"> * @Description 自定义表头排序：render方法，给排序按钮绑定点击查询事件</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">renderHeadSort</span>(<span class="params">h, &#123;column, $index&#125;, index, name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">'span'</span>, [</span><br><span class="line">        h(<span class="string">'span'</span>, column.label),</span><br><span class="line">        h(<span class="string">'span'</span>,</span><br><span class="line">            [</span><br><span class="line">                h(<span class="string">'i'</span>, &#123;</span><br><span class="line">                    attrs: &#123;</span><br><span class="line">                        id: name + <span class="string">'_up'</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    class: 'up',</span><br><span class="line"><span class="comment">//                            style: 'margin-left: 5px;',</span></span><br><span class="line">                    on: &#123;</span><br><span class="line">                        click: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                            <span class="keyword">let</span> input = <span class="built_in">document</span>.getElementById(name + <span class="string">'_up'</span>)</span><br><span class="line">                            <span class="keyword">let</span> itemClass = input.className</span><br><span class="line">                            <span class="keyword">if</span> (itemClass.indexOf(<span class="string">"onU"</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">                                input.classList.add(<span class="string">"onU"</span>)</span><br><span class="line">                                <span class="built_in">document</span>.getElementById(name + <span class="string">'_down'</span>).classList.remove(<span class="string">"onU"</span>)</span><br><span class="line">                                <span class="keyword">this</span>.listQuery.orderList = <span class="keyword">this</span>.listQuery.orderList.filter(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">                                    <span class="keyword">return</span> item[<span class="number">0</span>] != name;</span><br><span class="line">                                &#125;);</span><br><span class="line">                                <span class="keyword">this</span>.listQuery.orderList.push([name, <span class="number">1</span>])</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                input.classList.remove(<span class="string">"onU"</span>)</span><br><span class="line">                                <span class="keyword">this</span>.listQuery.orderList = <span class="keyword">this</span>.listQuery.orderList.filter(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">                                    <span class="keyword">return</span> item[<span class="number">0</span>] != name;</span><br><span class="line">                                &#125;);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;),</span><br><span class="line">                h(<span class="string">'i'</span>, &#123;</span><br><span class="line">                    class: 'down',</span><br><span class="line">                    attrs: &#123;</span><br><span class="line">                        id: name + <span class="string">'_down'</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    on: &#123;</span><br><span class="line">                        click: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                            <span class="keyword">let</span> input = <span class="built_in">document</span>.getElementById(name + <span class="string">'_down'</span>)</span><br><span class="line">                            <span class="keyword">let</span> itemClass = input.className</span><br><span class="line">                            <span class="keyword">if</span> (itemClass.indexOf(<span class="string">"onU"</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">                                input.classList.add(<span class="string">"onU"</span>)</span><br><span class="line">                                <span class="built_in">document</span>.getElementById(name + <span class="string">'_up'</span>).classList.remove(<span class="string">"onU"</span>)</span><br><span class="line">                                <span class="keyword">this</span>.listQuery.orderList = <span class="keyword">this</span>.listQuery.orderList.filter(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">                                    <span class="keyword">return</span> item[<span class="number">0</span>] != name;</span><br><span class="line">                                &#125;);</span><br><span class="line">                                <span class="keyword">this</span>.listQuery.orderList.push([name, <span class="number">0</span>])</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                input.classList.remove(<span class="string">"onU"</span>)</span><br><span class="line">                                <span class="keyword">this</span>.listQuery.orderList = <span class="keyword">this</span>.listQuery.orderList.filter(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">                                    <span class="keyword">return</span> item[<span class="number">0</span>] != name;</span><br><span class="line">                                &#125;);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;),</span><br><span class="line">            ]</span><br><span class="line">        ),</span><br><span class="line">    ]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @Date 2018/10/18 10:14</span></span><br><span class="line"><span class="comment"> * @Description  compute方法，对查询道德数据进行处理转化成可以显示的文本</span></span><br><span class="line"><span class="comment"> * 对于比较特殊和复杂的条件，允许直接在表格参数中定义成func传入，在这里调用</span></span><br><span class="line"><span class="comment"> * 同时，由于进行更新删除操作时需要的是原始数据，故不可将原始数据与处理过的数据混淆</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">computedFmt</span>(<span class="params">computedList,tableList</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> format,name,obj;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=computedList.length<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">let</span> tags = &#123;&#125;;</span><br><span class="line">        <span class="keyword">let</span> tips=&#123;&#125;;</span><br><span class="line">        obj = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(computedList[i]))</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=tableList.length<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line">            name=tableList[j].name</span><br><span class="line">            <span class="keyword">if</span>(tableList[j].type==<span class="string">"tag"</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(obj[name] || obj[name] ==<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="comment">//方法或对象</span></span><br><span class="line">                    <span class="keyword">if</span>(<span class="keyword">typeof</span> tableList[j].tagData===<span class="string">"function"</span>)&#123;</span><br><span class="line">                        tags[name]=tableList[j].tagData(obj[name],obj)</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        tags[name]=tableList[j].tagData[obj[name]]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(tableList[j].type==<span class="string">"tip"</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(tableList[j].tips &amp;&amp; <span class="keyword">typeof</span> tableList[j].tips === <span class="string">"function"</span>) &#123; <span class="comment">//tips是函数</span></span><br><span class="line">                        tips[name]=tableList[j].tips(obj[name],obj)  <span class="comment">//value,rowData参数</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123; <span class="comment">//不是函数</span></span><br><span class="line">                        tips[name]=tableList[j][name]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">                    tips[name]=<span class="string">"-"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(tableList[j].format)&#123;</span><br><span class="line">                format=tableList[j].format</span><br><span class="line"></span><br><span class="line">                <span class="comment">//优先执行自定义function，注意空值判断</span></span><br><span class="line">                <span class="keyword">if</span>(format.fmt)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="keyword">typeof</span> format.fmt === <span class="string">"function"</span>) &#123; <span class="comment">//fmt是函数</span></span><br><span class="line">                        <span class="keyword">let</span> fmt=format.fmt.call(<span class="keyword">this</span>,obj[name],obj)</span><br><span class="line">                        <span class="keyword">if</span>(fmt.fmt)&#123;</span><br><span class="line">                            obj[name]=fmt.fmt</span><br><span class="line">                        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                            obj[name]=fmt</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!obj[name] &amp;&amp; obj[name]!=<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(format.ratio)&#123;</span><br><span class="line">                    obj[name]=obj[name]/format.ratio</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(format.decimals)&#123;</span><br><span class="line">                    obj[name]=toDecimals(obj[name],format.decimals)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(format.comData)&#123;</span><br><span class="line">                    obj[name]=format.comData[obj[name]] || obj[name]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        obj.tags=tags</span><br><span class="line">        obj.tips=tips</span><br><span class="line">        computedList[i].showData=obj</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> computedList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param func remote select方法</span></span><br><span class="line"><span class="comment"> * @param query 用户输入val</span></span><br><span class="line"><span class="comment"> * @param name  查询的column</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">remoteQuery</span>(<span class="params">func,query,name</span>) </span>&#123;</span><br><span class="line">    format=format || <span class="string">""</span></span><br><span class="line">    <span class="keyword">if</span> (query !== <span class="string">''</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.selectLoading = <span class="literal">true</span>;</span><br><span class="line">            func(&#123;<span class="attr">query</span>:query,<span class="attr">idxOwnerId</span>:<span class="string">'eu.'</span>&#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.selectLoading = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">const</span> S2Data = response.data.data.items;</span><br><span class="line">                <span class="keyword">this</span>[name+<span class="string">'Options'</span>] = S2Data.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;<span class="attr">value</span>: item.id, <span class="attr">label</span>: item.text&#125;;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;).catch(<span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.selectLoading = <span class="literal">false</span></span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">remoteInitQuery</span>(<span class="params">func,name</span>) </span>&#123;</span><br><span class="line">    format=format || <span class="string">""</span></span><br><span class="line">    func(&#123;<span class="attr">query</span>:<span class="string">''</span>,<span class="attr">idxOwnerId</span>:<span class="string">'eu.'</span>&#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">               <span class="keyword">const</span> S2Data = response.data.data.items;</span><br><span class="line">               <span class="keyword">this</span>[name+<span class="string">'InitOptions'</span>] = S2Data.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                   <span class="keyword">return</span> &#123;<span class="attr">value</span>: item.id, <span class="attr">label</span>: item.text&#125;;</span><br><span class="line">               &#125;);</span><br><span class="line">               <span class="keyword">this</span>[name+<span class="string">'Options'</span>] = <span class="keyword">this</span>[name+<span class="string">'InitOptions'</span>];</span><br><span class="line">           &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><h2 id="1-表格组件化的目的"><a href="#1-表格组件化的目的" class="headerlink" title="1.表格组件化的目的"></a>1.表格组件化的目的</h2><p>&emsp;&emsp;一为减少模板代码量，二为方便对代码进行管理，同时保持可扩展性。就本人使用了一段时间vue的体验来讲，使用组件写业务代码并不会使代码简洁，甚至显得更啰嗦，但是代码层次清晰明了，便于理解，而且vue的组件的生命周期能提供粒度更细的控制。</p><h2 id="2-原始数据与展示数据的单独保存"><a href="#2-原始数据与展示数据的单独保存" class="headerlink" title="2.原始数据与展示数据的单独保存"></a>2.原始数据与展示数据的单独保存</h2><p>&emsp;&emsp;大致上将业务上使用的表格分成了只提供查询功能的简单表格和提供了增删查改等的复杂表格。对于简单表格来讲，只需要进行查询和数据的展示，但对复杂表格来说，进行修改删除操作时，只有原始数据才是有意义的，所以将原始数据存进data的list中，方便进行其他操作时直接引用，而展示数据则在computed中处理后存进computedLists，computedLists直接与表格绑定</p><h2 id="3-在computed中转化数据"><a href="#3-在computed中转化数据" class="headerlink" title="3.在computed中转化数据"></a>3.在computed中转化数据</h2><p>&emsp;&emsp;这里可以使用Element UI自带的expressions和vue的filters模块，不得不说Element UI的功能很强大，一个简单的input组件都能封装上百行代码。。。<br>&emsp;&emsp;expressions也可用作文本转换，但一来它不支持复杂的逻辑，二来expressions是直接混在组件template中的，大量使用会让代码结构显得混乱。filters相对expressions来说就规范点，但仍是嵌在template中，而且给每个vue实例写重复的filters也很烦。既然这样，不如直接在computed中一次性完成所有文本转换，这样代码量也少了很多。<br>&emsp;&emsp;computed的第二个好处是性能好。就使用效果来看，computed与method没有区别，但性能上差距很大。method中，每次页面渲染时都会重新执行一次。而computed的特点是依赖收集、动态计算，依赖的值发生变化才会修改，否则取缓存值，因此对于非响应式依赖（如Date.now()），计算一次后将不会发生改变。多数情况下computed够用，但如果要在数据变化响应时，执行异步操作或开销较大的操作，可以使用watct。</p><h2 id="4-watch监听搜索并使用节流函数"><a href="#4-watch监听搜索并使用节流函数" class="headerlink" title="4.watch监听搜索并使用节流函数"></a>4.watch监听搜索并使用节流函数</h2><p>&emsp;&emsp;一开始我还傻乎乎的给每个输入框绑定事件，后来发现完全没必要弄得这么麻烦。直接将所有相关参数绑定到listQuery中，监听listQuery的变化即可。同时，为了防止文本输入框查询频率过高，加入了节流函数进行限制。</p><h2 id="5-renderHeadSort"><a href="#5-renderHeadSort" class="headerlink" title="5.renderHeadSort"></a>5.renderHeadSort</h2><p>&emsp;&emsp;Element Table其实有提供现成的排序功能，无论是前端排序还是访问后端查询接口，但我不喜欢它的样式，所以自己写了一个(任性</p><h2 id="6-call-apply的使用"><a href="#6-call-apply的使用" class="headerlink" title="6.call/apply的使用"></a>6.call/apply的使用</h2><p>&emsp;&emsp;tableCustom.js和table.vue实例中存在大量的call/apply方法，因为表格封装后只剩下少部分参数和方法在实例中，使用call/apply可以在外部代码中引用到这些方法，方便将这部分代码与通用的部分分离开来。而且由于项目中引入了vue-i18n国际化插件，而i18n又跟vue实例绑定，所以需要用到i18n做文本转换的部分不得不使用call/apply来获取vue实例。</p><h2 id="7-父子组件的两种通信方式"><a href="#7-父子组件的两种通信方式" class="headerlink" title="7.父子组件的两种通信方式"></a>7.父子组件的两种通信方式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">this.$emit(&apos;func&apos;,params) 子组件触发func事件，父组件监听，这种模式无法获取返回值；</span><br><span class="line">this.parent.func(params)  子组件直接调用父组件方法，可直接获取返回值，不过父组件中必须注册对应方法，否则报错。</span><br></pre></td></tr></table></figure><h2 id="8-table参数中的format"><a href="#8-table参数中的format" class="headerlink" title="8.table参数中的format"></a>8.table参数中的format</h2><p>&emsp;&emsp;format即文本转换规则，是一个Object，里面可以存储多个规则，如:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">decimals   小数点设置</span><br><span class="line">areaFM     地区样式</span><br><span class="line">comData    语义化，比如val=-1在页面显示失败，value=1显示成功,value=0显示进行中</span><br></pre></td></tr></table></figure><p></p><p>&emsp;&emsp;对于用的比较少的特殊规则，则可以直接传递对应function：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(format.fmt)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> format.fmt === <span class="string">"function"</span>) &#123; <span class="comment">//fmt是函数</span></span><br><span class="line">        <span class="keyword">let</span> fmt=format.fmt.call(<span class="keyword">this</span>,obj[name],obj)</span><br><span class="line">        <span class="keyword">if</span>(fmt.fmt)&#123;</span><br><span class="line">            obj[name]=fmt.fmt</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            obj[name]=fmt</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="9-mixin整合重复代码"><a href="#9-mixin整合重复代码" class="headerlink" title="9.mixin整合重复代码"></a>9.mixin整合重复代码</h2><p>&emsp;&emsp;实际上这个表格仍有一部分(大概一百来行)可以压缩到mixin里面，这样子实际调用起来会显得更简洁，有时间再整理出来吧。</p><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p></p><div align="center"><img src="/2018/11/11/element-vue-table/1.gif"></div><br>&emsp;&emsp;这样子一个简单的表格组件就差不多完成了，个人感觉写的并不够好，不过既然能满足日常业务需求，也就不吹毛求疵了。另外这篇博客字有点多，可以拆开来的，不过本人懒癌发作，就不整理了<font face="黑体" color="red" size="5">（逃</font><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Jul 12 2019 16:40:24 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;&amp;emsp;&amp;emsp;公司后台管理系统有很多表格页面，分别对应数据库不同的表。整个后台UI使用的是Element UI，E
      
    
    </summary>
    
      <category term="vue" scheme="https://github.com/lsfst/lsfst.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="https://github.com/lsfst/lsfst.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>windows idea 搭建Node开发环境</title>
    <link href="https://github.com/lsfst/lsfst.github.io/2018/11/09/Node%E7%8E%AF%E5%A2%83/"/>
    <id>https://github.com/lsfst/lsfst.github.io/2018/11/09/Node环境/</id>
    <published>2018-11-09T03:35:58.000Z</published>
    <updated>2018-12-01T13:35:14.302Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 12 2019 16:40:24 GMT+0800 (China Standard Time) --><p>最近有点小闲，开始学习NodeJS相关的东西。之前Node与NPM已经安装好了，环境变量也设置ok：</p><div align="center"><img src="/2018/11/09/Node环境/node1.png" title="版本"></div><br><br><br>话不多说，npm install 四连走起（这里可以按照需要安装想要的包）：<br><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install express -g </span><br><span class="line">npm install jade -g</span><br><span class="line">npm install mysql -g</span><br><span class="line">npm install -g express-generator</span><br></pre></td></tr></table></figure><br><br>在安装jade时直接报警告了:<br><br><img src="/2018/11/09/Node环境/node2.png" title="jade警告"><br><br>原来是改名成pug了，问题不大，继续下一步！<br><br>在控制台运行：<br><br><img src="/2018/11/09/Node环境/node3.png" title="一切正常"><br><br>由于平时干后端习惯了使用idea，而且idea也提供了NodeJS插件，所以接下来直接在idea中安装NodeJS插件。<br>打开idea，File -&gt; setting -&gt;Plugins,右边默认没有这个组件，需要手动点击Browe repositories..，在插件列表中搜索nodejs,将看到NodeJS插件，点击下载：<br><br><img src="/2018/11/09/Node环境/node4.png" title="下载"><br><br>然后：<br><br><img src="/2018/11/09/Node环境/node5.png" title="下载失败"><br><br>遇到这种情况可以直接去 <a href="https://plugins.jetbrains.com/" target="_blank" rel="noopener">idea plugin 官网</a>下载插件<br>直接输入NodeJS，回车，插件版本有很多，选了一个最新的版本下载，解压，将解压文件夹里面的NodeJS子文件夹复制到idea所在安装目录的plugins子文件夹中<br><br><img src="/2018/11/09/Node环境/node6.png" title="解压复制"><br><br><br>之后重启idea，安装按钮消失，看起来是ok了<br><br><br><img src="/2018/11/09/Node环境/node7.png" title="按钮消失"><br><br>File -&gt; new -&gt;Project创建应用：<br><br><img src="/2018/11/09/Node环境/node8.png" title="创建"><br><br><br><br>没事，还有一个方法，将之前放在plugins目录下的NodeJS文件夹删除，将压缩包直接放在plugins目录下，idea可以直接解压插件压缩包：<br><br><img src="/2018/11/09/Node环境/node9.png" title="压缩包"><br><br>结果还是不行：<br><br><div align="center"><img src="/2018/11/09/Node环境/node10.png" title="版本不兼容"></div><p>原来是插件与idea的版本不兼容，需要适配。</p><p>查看idea版本：Help–&gt;about</p><img src="/2018/11/09/Node环境/node11.png" title="idea版本"><p>这个版本对应着插件的COMPATIBILITY，只要idea版本介于插件的COMPATIBILITY范围内即可。</p><img src="/2018/11/09/Node环境/node12.png" title="idea版本"><p>符合要求的版本有几个，随机选择一个下载：</p><img src="/2018/11/09/Node环境/node13.png" title="插件版本"><p>直接Install plugin from disk ，加载压缩包，重启idea：</p><img src="/2018/11/09/Node环境/node14.png" title="重启"><p>终于出来了</p><p>然后创建第一个应用：发现红框处无法获取版本，莫不是加载方式的锅？</p><div align="center"><img src="/2018/11/09/Node环境/node15.png" title="重新加载"></div><p>于是又尝试着直接将压缩包解压的文件夹放在plugins目录下，这次可以正常获取版本了。 <del>这坑是真心多（<font color="red">逃</font></del></p><p>最后总结一下这个插件安装流程：<br><strong>1.File -&gt; setting -&gt;Plugins-&gt;Browe repositories，搜索nodejs,下载<br>2.若下载失败，去 <a href="https://plugins.jetbrains.com/" target="_blank" rel="noopener">官网</a>下载对应插件压缩包，将压缩包解压，NodeJS文件夹直接放在idea安装目录下的plugins子目录下<br>3.重启idea，就可以正常创建</strong></p><font color="red"><br>一定要注意的点：<br><strong><em>1.插件与idea版本的匹配<br>2.Install plugin from disk加载压缩包在创建应用时无法正常获取express版本，最好直接解压放在idea安装目录的plugins下</em></strong><br><br>补充：后来在Mac上面重新安装了一次，没遇到上面的问题，看来正常情况下idea可下载的NodeJS插件应该是跟自身版本匹配的，当然真要是出了问题也可以按照上面步骤解决<br></font><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Jul 12 2019 16:40:24 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;最近有点小闲，开始学习NodeJS相关的东西。之前Node与NPM已经安装好了，环境变量也设置ok：&lt;/p&gt;&lt;div ali
      
    
    </summary>
    
      <category term="node" scheme="https://github.com/lsfst/lsfst.github.io/categories/node/"/>
    
    
      <category term="node" scheme="https://github.com/lsfst/lsfst.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>一次mysql业务优化过程</title>
    <link href="https://github.com/lsfst/lsfst.github.io/2018/09/17/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A7%A6%E5%8F%91%E5%99%A8%E4%BC%98%E5%8C%96/"/>
    <id>https://github.com/lsfst/lsfst.github.io/2018/09/17/数据库触发器优化/</id>
    <published>2018-09-16T16:00:00.000Z</published>
    <updated>2019-07-12T03:25:27.426Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 12 2019 16:40:24 GMT+0800 (China Standard Time) --><p>&emsp;&emsp;最近mysql数据库读写压力比较大，虽然配置了主从数据库，但还是需要进一步改善。原先业务中大量使用了mysql的触发器，对数据库性能有一定影响，所以要去掉部分触发器。</p><p>####解决方案<br>原先用户在前端修改信息时，会向后台发送请求，操作数据库进行读写，如果某些关键字段发生修改，就会触发触发器，在临时表插入临时记录。后台定时任务会定期查询记录表，完成业务处理后删除记录，比如说发送注册短信，远程控制设备等。</p><h4 id="js-eval-代替触发器"><a href="#js-eval-代替触发器" class="headerlink" title="js eval 代替触发器"></a>js eval 代替触发器</h4><p>&emsp;&emsp;触发器的语法并不复杂，但有时候会遇到条件比较复杂的情况，比如说：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CREATE TRIGGER trig AFTER UPDATE ON tbUser FOR EACH ROW</span><br><span class="line">        BEGIN</span><br><span class="line">        DECLARE str VARCHAR(40)character set utf8;</span><br><span class="line">        IF new.status != 0</span><br><span class="line">        THEN</span><br><span class="line">        SET str = &quot;OK&quot;;</span><br><span class="line">        ELSEIF new.status = 0 AND (old.age != new.age or old.sex != new.sex )</span><br><span class="line">        THEN</span><br><span class="line">        SET str = &quot;BAD&quot;;</span><br><span class="line">        END IF;</span><br><span class="line">        INSERT INTO logs(log) values(str);</span><br><span class="line">        END;         </span><br></pre></td></tr></table></figure><p></p><p>&emsp;&emsp;触发这个触发器需要检查status，age，sex三个字段的值，如果放在后端代码中去检查，往往还需要先在数据库中查询一次修改前的值进行对比，这样绕一圈繁琐不说，还会浪费部分性能。除此之外，由于业务中这样的触发器有多个，全部改的话后端代码要修改很多，后期业务发生变更，也很麻烦。</p><p>&emsp;&emsp;好在触发器的这种条件判断使用js的eval()方法是很容易做到的。eval()方法接收一个参数s，如果s不是字符串，则直接返回s。否则执行s语句。如果s语句执行结果是一个值，则返回此值，否则返回undefined。像上面那个触发器就可以改造成这样：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let oldVal = &#123;name: &quot;张三&quot;, status: 0, age: 23, sex: &quot;男&quot;&#125;,</span><br><span class="line">    newVal = &#123;name: &quot;张三&quot;, status: 1, age: 23, sex: &quot;男&quot;&#125;,</span><br><span class="line">    logStr = &quot;&quot;;</span><br><span class="line">eval(&quot;if(newVal.status == 0)&#123;logStr = &apos;OK&apos;&#125; else if (newVal.status != 0 || (oldVal.age != newVal.age || oldVal.sex != newVal.sex))&#123;logStr = &apos;BAD&apos;&#125;&quot;);</span><br><span class="line">console.log(logStr); //-&gt;&apos;BAD&apos;</span><br></pre></td></tr></table></figure><br>&emsp;&emsp;当然因为eval太强大了，所以它只能在非严格模式中进行使用，在use strict中是不允许使用这个方法的。这样每个涉及到触发器的http请求都可以在前端统一进行判断，并在请求中带上相关标识，在后端AOP切面中进行处理。<p></p><h4 id="消息队列存储临时记录"><a href="#消息队列存储临时记录" class="headerlink" title="消息队列存储临时记录"></a>消息队列存储临时记录</h4><p>&emsp;&emsp;如果业务都在单机上，其实是可以用线程池处理的，Executers提供的固定线程池使用了一个无界队列LinkedBlockingQueue，缺点是受限于应用服务器的内存大小，队列长度不易太长，且缺乏持久化机制，比较适合处理简单的逻辑。与之相比，消息队列则更适合多机情况，更重要的是能提供持久化，方便控制和监察队列数量和消息消费速率。<br>&emsp;&emsp;考虑到实际业务需求，还是使用redis队列更合适，单机redis可以支持10W的QPS，完全可以满足需求。</p><h5 id="使用redis队列"><a href="#使用redis队列" class="headerlink" title="使用redis队列"></a>使用redis队列</h5><p>&emsp;&emsp;Redis的列表使用双向链表实现，保存了头尾节点，在列表头尾两边插取元素都是非常快的，可以直接使用Redis的List实现消息队列，只需简单的两个指令lpush和rpop或者rpush和lpop<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">public class RedisConsumer extends Thread &#123;</span><br><span class="line"></span><br><span class="line">    private static Logger logger = LoggerFactory.getLogger( RedisConsumer.class );</span><br><span class="line"></span><br><span class="line">    private String customerName;</span><br><span class="line">    private ListOperations listOperations;</span><br><span class="line">    private static boolean stop = false;</span><br><span class="line"></span><br><span class="line">    public RedisConsumer(String name,ListOperations listOperations) &#123;</span><br><span class="line">        this.customerName = name;</span><br><span class="line">        this.listOperations = listOperations;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void stopCounsume()&#123;</span><br><span class="line">        stop = false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void cousume() &#123;</span><br><span class="line">        //使用brpop指令，在有元素时才返回，没有则阻塞直到超时返回null，可以减少不必要的连接浪费</span><br><span class="line">        Object message = listOperations.rightPop( RedisConst.QUEUE_NAME, RedisConst.BLOCK_TIME, TimeUnit.MILLISECONDS );</span><br><span class="line">        if ( message != null ) &#123;</span><br><span class="line">            handle( message.toString() );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void handle(String message) &#123;</span><br><span class="line">        //...</span><br><span class="line">        logger.info(customerName + &quot; 正在处理消息: &quot; + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">   public void run() &#123;</span><br><span class="line">        while (!stop) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                Thread.sleep( 100 );</span><br><span class="line">            &#125; catch ( InterruptedException e ) &#123;</span><br><span class="line">                logger.info( &quot;sleep interrupted|&#123;&#125;&quot;,e.getMessage() );</span><br><span class="line">            &#125;</span><br><span class="line">            cousume();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class RedisConst &#123;</span><br><span class="line">    public static String QUEUE_NAME = &quot;message:queue&quot; ;</span><br><span class="line">    public static int BLOCK_TIME = 3000 ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h5 id="redis发布订阅模式"><a href="#redis发布订阅模式" class="headerlink" title="redis发布订阅模式"></a>redis发布订阅模式</h5><p>&emsp;&emsp;实际上redis本身也提供了的类似MQ的简单发布订阅模式，结合Spring使用起来非常简单，但是仔细看过文档后，发现这个功能还是有所不足。<br>&emsp;&emsp;redis的发布订阅与主流的消息队列中间件比较：</p><pre><code>（1）主流的消息队列如RabbitMQ,ActiveMQ等支持多种消息协议，包括AMQP，MQTT，Stomp等，并且支持JMS规范，但Redis没有提供对这些协议的支持； （2）消息队列提供持久化功能，但Redis无法对消息持久化存储，一旦消息被发送，如果没有订阅者接收，那么消息就会丢失； （3）消息队列提供了消息传输保障(发布-接收确认和事务)，当客户端连接超时或事务回滚等情况发生时，消息会被重新发送给客户端，Redis没有提供消息传输保障。 </code></pre><p>&emsp;&emsp;其中最大的缺点是消息没有持久化，没有传输保障，无法保证客户端能对消息进行消费，所以这个方案也就只能pass了。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Jul 12 2019 16:40:24 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;&amp;emsp;&amp;emsp;最近mysql数据库读写压力比较大，虽然配置了主从数据库，但还是需要进一步改善。原先业务中大量使用了
      
    
    </summary>
    
      <category term="Java" scheme="https://github.com/lsfst/lsfst.github.io/categories/Java/"/>
    
    
      <category term="redis" scheme="https://github.com/lsfst/lsfst.github.io/tags/redis/"/>
    
      <category term="mysql" scheme="https://github.com/lsfst/lsfst.github.io/tags/mysql/"/>
    
      <category term="javascript" scheme="https://github.com/lsfst/lsfst.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Springboot 整合Spring Security 登录验证</title>
    <link href="https://github.com/lsfst/lsfst.github.io/2018/06/21/SpringSecurity/"/>
    <id>https://github.com/lsfst/lsfst.github.io/2018/06/21/SpringSecurity/</id>
    <published>2018-06-20T16:00:00.000Z</published>
    <updated>2018-12-01T13:53:04.806Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Jul 12 2019 16:40:24 GMT+0800 (China Standard Time) --><p>&emsp;&emsp;公司后台管理项目之前采用的是shiro做权限验证，前段时间花了点时间替换成了Spring Security，现在有时间将配置过程整理了一下。</p><h3 id="pom-xml引入依赖"><a href="#pom-xml引入依赖" class="headerlink" title="pom.xml引入依赖"></a>pom.xml引入依赖</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.0.2.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="添加Spring-Security配置类"><a href="#添加Spring-Security配置类" class="headerlink" title="添加Spring Security配置类"></a>添加Spring Security配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">"/css/**"</span>, <span class="string">"/js/**"</span>,<span class="string">"/fonts/**"</span>).permitAll()</span><br><span class="line">                .anyRequest().authenticated();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这样简单配置后，基本的验证功能就有了</p><h4 id="关于-EnableWebSecurity"><a href="#关于-EnableWebSecurity" class="headerlink" title="关于@EnableWebSecurity"></a>关于@EnableWebSecurity</h4><p>&emsp;&emsp;<font color="red">@EnableWebSecurity与WebSecurityConfigurerAdapter一起配合即可提供基于web的security，这俩是整个Spring Security配置的基础。</font></p><figure class="highlight java"><figcaption><span>EnableWebSecurity.class</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;WebSecurityConfiguration.class, ObjectPostProcessorConfiguration.class, SpringWebMvcImportSelector.class&#125;)</span><br><span class="line"><span class="meta">@EnableGlobalAuthentication</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableWebSecurity &#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">debug</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这里需要注意的是<font color="red">@EnableGlobalAuthentication</font>：</p><figure class="highlight java"><figcaption><span>EnableGlobalAuthentication.class</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;AuthenticationConfiguration.class&#125;)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableGlobalAuthentication &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在这个注解中，又导入了另外一个配置类AuthenticationConfiguration，AuthenticationConfiguration注册了AuthenticationManagerBuilder，其作用是对用户提交的用户名和密码进行验证，它是Spring Security账户验证的核心</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthenticationManagerBuilder <span class="title">authenticationManagerBuilder</span><span class="params">(ObjectPostProcessor&lt;Object&gt; objectPostProcessor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AuthenticationManagerBuilder(objectPostProcessor);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;与HttpSecurity类似，AuthenticationManagerBuilder也是SecurityBuilder的一个子类。不同的是，HttpSecurity使用到的SecurityConfigurer基本上最终产生的都是一个过滤器，而AuthenticationManagerBuilder使用到SecurityConfiguer最终产生的都是AuthenticationManager的一个子类实例ProviderManager。ProviderManager类的创建是通过performBuild方法创建的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ProviderManager <span class="title">performBuild</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (!isConfigured()) &#123;</span><br><span class="line">      logger.debug(<span class="string">"No authenticationProviders and no parentAuthenticationManager defined. Returning null."</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//创建ProviderManager实例，用于管理验证提供者AuthenticationProvider</span></span><br><span class="line">   ProviderManager providerManager = <span class="keyword">new</span> ProviderManager(authenticationProviders,</span><br><span class="line">         parentAuthenticationManager);</span><br><span class="line">   <span class="keyword">if</span> (eraseCredentials != <span class="keyword">null</span>) &#123;</span><br><span class="line">      providerManager.setEraseCredentialsAfterAuthentication(eraseCredentials);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (eventPublisher != <span class="keyword">null</span>) &#123;</span><br><span class="line">      providerManager.setAuthenticationEventPublisher(eventPublisher);</span><br><span class="line">   &#125;</span><br><span class="line">   providerManager = postProcess(providerManager);</span><br><span class="line">   <span class="keyword">return</span> providerManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;SpringSecurity的每一种方式都对应一个provider。如果需要联合使用多种验证方式，ProviderManager就可以帮助我们来管理这些provider，例如先用谁验证，后用谁验证，以及是否只要有一个provider验证成功就算用户已经成功验证等。<br>AuthenticationProvider的创建：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> InMemoryUserDetailsManagerConfigurer&lt;AuthenticationManagerBuilder&gt; <span class="title">inMemoryAuthentication</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (InMemoryUserDetailsManagerConfigurer)<span class="keyword">this</span>.apply(<span class="keyword">new</span> InMemoryUserDetailsManagerConfigurer());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> JdbcUserDetailsManagerConfigurer&lt;AuthenticationManagerBuilder&gt; <span class="title">jdbcAuthentication</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (JdbcUserDetailsManagerConfigurer)<span class="keyword">this</span>.apply(<span class="keyword">new</span> JdbcUserDetailsManagerConfigurer());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;T extends UserDetailsService&gt; <span class="function">DaoAuthenticationConfigurer&lt;AuthenticationManagerBuilder, T&gt; <span class="title">userDetailsService</span><span class="params">(T userDetailsService)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.defaultUserDetailsService = userDetailsService;</span><br><span class="line">    <span class="keyword">return</span> (DaoAuthenticationConfigurer)<span class="keyword">this</span>.apply(<span class="keyword">new</span> DaoAuthenticationConfigurer(userDetailsService));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> LdapAuthenticationProviderConfigurer&lt;AuthenticationManagerBuilder&gt; <span class="title">ldapAuthentication</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (LdapAuthenticationProviderConfigurer)<span class="keyword">this</span>.apply(<span class="keyword">new</span> LdapAuthenticationProviderConfigurer());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;用户在登陆时，会被登陆验证拦截器AuthenticationProcessingFilter拦截，调用AuthenticationManager的实现，而AuthenticationManager会调用ProviderManager来获取用户验证信息，如果验证通过后会将用户的权限信息封装成一个User放到spring的全局缓存SecurityContextHolder中，以备后面访问资源时使用。登陆成功访问资源（即授权管理）时，会通过AbstractSecurityInterceptor拦截器拦截，其中会调用FilterInvocationSecurityMetadataSource的方法来获取被拦截url所需的全部权限，然后调用授权管理器AccessDecisionManager，这个授权管理器会通过spring的全局缓存SecurityContextHolder获取用户的权限信息，还会获取被拦截的url和被拦截url所需的全部权限，然后根据所配的策略（有：一票决定，一票否定，少数服从多数等），如果权限足够，则返回，权限不够则报错并调用权限不足页面。</p><h4 id="开启Spring-Security自带注解"><a href="#开启Spring-Security自带注解" class="headerlink" title="开启Spring Security自带注解"></a>开启Spring Security自带注解</h4><p>&emsp;&emsp;Spring Security默认禁用注解，要想开启注解，需要在继承WebSecurityConfigurerAdapter的类上加@EnableGlobalMethodSecurity注解，并在该类中将AuthenticationManager定义为Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableGlobalMethodSecurity</span>(prePostEnabled = <span class="keyword">true</span>, securedEnabled = <span class="keyword">true</span>)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationManager <span class="title">authenticationManager</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.authenticationManager();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>JSR-250注解：<br>@DenyAll 拒绝所有访问<br>@RolesAllowed({“USER”, “ADMIN”}) @PermitAll 允许所有访问</p><p>prePostEnabled注解：<br>@PreAuthorize<br>@PreAuthorize<br>@PostAuthorize<br>@PostAuthorize</p><p>securedEnabled注解：<br>@Secured</p><h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><h4 id="基于UserDetailsService的认证服务"><a href="#基于UserDetailsService的认证服务" class="headerlink" title="基于UserDetailsService的认证服务"></a>基于UserDetailsService的认证服务</h4><p>&emsp;&emsp;spring security提供了多种认证方式(内存、JDBC、LDAP和自定义UserDetailService验证)，不管是哪一种验证方式，都是通过一个自动注入的AuthenticationManagerBuilder对象来完成的。这个类用于构建AuthenticationManager，其作用是对用户提交的用户名和密码进行验证</p><h5 id="定义SecurityUser用户实体类"><a href="#定义SecurityUser用户实体类" class="headerlink" title="定义SecurityUser用户实体类"></a>定义SecurityUser用户实体类</h5><figure class="highlight java"><figcaption><span>SecurityUser</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">UserDetails</span>, <span class="title">CredentialsContainer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">410L</span>;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;GrantedAuthority&gt; authorities;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> accountNonExpired;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> accountNonLocked;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> credentialsNonExpired;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> enabled;</span><br><span class="line">    </span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;项目中经常需要获取登录用户的角色信息，因此这里直接将role信息存进SecurityUser类中</p><figure class="highlight java"><figcaption><span>SecurityUser</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityUser</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String role;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SecurityUser</span><span class="params">(String username, String password, Collection&lt;? extends GrantedAuthority&gt; authorities)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(username, password, authorities);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SecurityUser</span><span class="params">(String username, String password, <span class="keyword">boolean</span> enabled, <span class="keyword">boolean</span> accountNonExpired, <span class="keyword">boolean</span> credentialsNonExpired, <span class="keyword">boolean</span> accountNonLocked, Collection&lt;? extends GrantedAuthority&gt; authorities)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(username, password, enabled, accountNonExpired, credentialsNonExpired, accountNonLocked, authorities);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SecurityUser</span><span class="params">(String username, String password, String role, Collection&lt;? extends GrantedAuthority&gt; authorities)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(username, password, authorities);</span><br><span class="line">        <span class="keyword">this</span>.role = role;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRole</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.role;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRole</span><span class="params">(String role)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.role = role;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="实现UserDetailsService账号验证"><a href="#实现UserDetailsService账号验证" class="headerlink" title="实现UserDetailsService账号验证"></a>实现UserDetailsService账号验证</h5><figure class="highlight java"><figcaption><span>SecurityUser</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityUserService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger= LoggerFactory.getLogger( SecurityUserService.class );</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    EouCfrmUserService userService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    EouCfrmAuthorizationsService authorizationService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    EouAgentsService agentsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SecurityUser <span class="title">loadUserByUsername</span><span class="params">( String username )</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">        TbCfrmUser user=userService.selectByPrimaryKey( username );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(user==<span class="keyword">null</span>)&#123;</span><br><span class="line">            logger.info( <span class="string">"用户名不存在"</span> );</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(<span class="string">"用户名不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;GrantedAuthority &gt; grantedAuthorities  = <span class="keyword">new</span> ArrayList&lt;GrantedAuthority&gt;();</span><br><span class="line"></span><br><span class="line">        List&lt;FrameAuthorization &gt; authorizations = authorizationService.selectAuthorizationByRole( user.getIdxRoleId_tbRole() );</span><br><span class="line"></span><br><span class="line">        GrantedAuthority grantedAuthority = <span class="keyword">new</span> SimpleGrantedAuthority(<span class="string">"ROLE_"</span>+user.getIdxRoleId_tbRole());</span><br><span class="line">        <span class="comment">//1：此处将权限信息添加到 GrantedAuthority 对象中，在后面进行权限验证时会使用GrantedAuthority 对象。</span></span><br><span class="line">        grantedAuthorities.add(grantedAuthority);</span><br><span class="line">        <span class="keyword">for</span>(FrameAuthorization authorization:authorizations)&#123;</span><br><span class="line">            <span class="comment">//默认情况下，GrantedAuthority对象存储的是用户role信息，默认前缀ROLE_，可以按照实际情况自由配置</span></span><br><span class="line">            <span class="comment">//此处将权限信息添加到 GrantedAuthority 对象中，在后面进行权限验证时会使用GrantedAuthority 对象。</span></span><br><span class="line">                    grantedAuthority = <span class="keyword">new</span> SimpleGrantedAuthority(authorization.getUrl());</span><br><span class="line">                    grantedAuthorities.add(grantedAuthority);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String role=user.getIdxRoleId_tbRole();</span><br><span class="line">        <span class="keyword">if</span>(role.equals( <span class="string">"admin"</span> ))&#123;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(role.equals( <span class="string">"agent"</span> ))&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TbAgent agent=agentsService.selectAgentByAgentName( username );</span><br><span class="line">                idxOwnerId=agent.getIdxAgentId()+<span class="string">"."</span>;</span><br><span class="line">            &#125;<span class="keyword">catch</span> ( Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(<span class="string">"代理账号异常"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(<span class="string">"该账号暂无权限"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> SecurityUser(user.getKeyUserId(), user.getPassword(),user.getIdxRoleId_tbRole(), grantedAuthorities);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这里有一个坑，用户在登录失败时，需要根据错误信息提示用户是账号密码错误。但在Spring Security中，默认情况下不管你是用户名不存在，密码错误，还是其他错误，都会转换成Bad credentials异常信息，而不是具体的错误。原因在于DaoAuthenticationProvider的父类AbstractUserDetailsAuthenticationProvider的authenticate方法中进行了处理：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">try</span> &#123;  </span><br><span class="line">    user = retrieveUser(username, (UsernamePasswordAuthenticationToken) authentication);  </span><br><span class="line">&#125; <span class="keyword">catch</span> (UsernameNotFoundException notFound) &#123;  </span><br><span class="line">    logger.debug(<span class="string">"User '"</span> + username + <span class="string">"' not found"</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (hideUserNotFoundExceptions) &#123;  </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(messages.getMessage(  </span><br><span class="line">                <span class="string">"AbstractUserDetailsAuthenticationProvider.badCredentials"</span>, <span class="string">"Bad credentials"</span>));  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="keyword">throw</span> notFound;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><p></p><p>&emsp;&emsp;所以如果这里需要做自定义过滤验证，可以直接抛出BadCredentialsException。<br>如果前端是JSP，可以通过 ${sessionScope.SPRING_SECURITY_LAST_EXCEPTION.message} 显示错误信息</p><h4 id="md5加密"><a href="#md5加密" class="headerlink" title="md5加密"></a>md5加密</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMessageDigestPasswordEncoder</span> <span class="keyword">extends</span> <span class="title">MessageDigestPasswordEncoder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger= LoggerFactory.getLogger( MyMessageDigestPasswordEncoder.class );</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyMessageDigestPasswordEncoder</span><span class="params">( String algorithm )</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>( algorithm );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyMessageDigestPasswordEncoder</span><span class="params">( String algorithm, <span class="keyword">boolean</span> encodeHashAsBase64 )</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>( algorithm, encodeHashAsBase64 );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//即使项目重启，页面刷新第一时间会在isPasswordValid方法中验证账号信息，验证成功后前往loginsuccesshandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPasswordValid</span><span class="params">( String encPass, String rawPass, Object salt )</span> </span>&#123;</span><br><span class="line">        String pass1 = <span class="string">""</span> + encPass;</span><br><span class="line">        String pass2 = MD5Utils.md5( rawPass );</span><br><span class="line">        <span class="comment">//官方文档是通过encodePassword加盐加密，这个可以根据实际需求随意修改</span></span><br><span class="line">        logger.info( <span class="string">"encPass:"</span> + encPass + <span class="string">";rawPass:"</span> + rawPass + <span class="string">"pass1:"</span> + pass1 + <span class="string">";pass2:"</span> + pass2 );</span><br><span class="line">        <span class="keyword">boolean</span> bool = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> ( pass1.equals( pass2 ) ) &#123;</span><br><span class="line">            bool = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bool;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//自定义md5加密</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">md5</span><span class="params">(String strObj)</span> </span>&#123;</span><br><span class="line">        String resultString = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> String(strObj);</span><br><span class="line">            MessageDigest ex = MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">            resultString = byteToString(ex.digest(strObj.getBytes()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException var3) &#123;</span><br><span class="line">            var3.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resultString;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h4 id="静态资源控制"><a href="#静态资源控制" class="headerlink" title="静态资源控制"></a>静态资源控制</h4><p>&emsp;&emsp;HttpSecurity的ignoring()与WebSecurity的permitAll()都可以控制静态资源。<br>&emsp;&emsp;WebSecurityConfigurerAdapter提供了三个configure方法，分别提供对AuthenticationManagerBuilder，WebSecurity与HttpSecurity的配置，其中AuthenticationManagerBuilder进行账号认证配置。<br>&emsp;&emsp;WebSecurity主要是跟web资源相关的配置，HttpSecurity则是对所有http请求进行管理，两者可以控制静态资源的权限，但本质的区别在于：<br></p><blockquote><p>HttpSecurity的ignoring()完全绕过了spring security的所有filter，相当于不走验证，比较适合配置前端相关的静态资源；<br>HttpSecurity的permitAll()则没有绕过spring security，其中包含了登录的以及匿名的，会给没有登录的用户适配一个AnonymousAuthenticationToken，设置到SecurityContextHolder，方便后面的filter可以统一处理authentication。</p></blockquote><p></p><h4 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CsrfSecurityRequestMatcher</span> <span class="keyword">implements</span> <span class="title">RequestMatcher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger( CsrfSecurityRequestMatcher.class );</span><br><span class="line">    <span class="keyword">private</span> Pattern allowedMethods = Pattern.compile( <span class="string">"^(GET|HEAD|TRACE|OPTIONS)$"</span> );</span><br><span class="line">    <span class="keyword">private</span> RegexRequestMatcher unprotectedMatcher = <span class="keyword">new</span> RegexRequestMatcher( <span class="string">"^/api/.*"</span>, <span class="keyword">null</span> );</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">( HttpServletRequest httpServletRequest )</span> </span>&#123;</span><br><span class="line">        String uri=httpServletRequest.getRequestURI();</span><br><span class="line">        <span class="keyword">if</span> ( allowedMethods.matcher( httpServletRequest.getMethod() ).matches()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> !unprotectedMatcher.matches( httpServletRequest );</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>&emsp;&emsp;开启CSRF后，页面所有表单提交都需要带上token，如果页面是jsp/thymeleaf模板可以将token存进通用的页面中<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=<span class="string">"_csrf"</span> content=<span class="string">"$&#123;_csrf.token&#125;"</span>/&gt;</span><br><span class="line">&lt;meta name=<span class="string">"_csrf_header"</span> content=<span class="string">"$&#123;_csrf.headerName&#125;"</span>/&gt;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p></p><p>&emsp;&emsp;<del>如果想偷懒的话，也可以直接在CsrfSecurityRequestMatcher中对相应接口放行，我就是这么做的(逃</del></p><p>&emsp;&emsp;注意：开启csrf后注销需使用post表单提交logout</p><h4 id="自定义LoginSuccessHandler"><a href="#自定义LoginSuccessHandler" class="headerlink" title="自定义LoginSuccessHandler"></a>自定义LoginSuccessHandler</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginSuccessHandler</span> <span class="keyword">extends</span> <span class="title">SavedRequestAwareAuthenticationSuccessHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger( LoginSuccessHandler.class );</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String defaultTargetUrl = <span class="string">"/index"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationSuccess</span><span class="params">( HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                                         HttpServletResponse response, Authentication authentication )</span> <span class="keyword">throws</span> IOException,</span></span><br><span class="line"><span class="function">            ServletException </span>&#123;</span><br><span class="line">        <span class="comment">//获得授权后可得到用户信息</span></span><br><span class="line">        SecurityUser userDetails = ( SecurityUser ) authentication.getPrincipal();</span><br><span class="line">        logger.info( <span class="string">"["</span> + userDetails.getRole() + <span class="string">"]|"</span> + userDetails.getUsername() + <span class="string">"|["</span> + IPUtils.getIpAddress( request ) + <span class="string">"] login success"</span> );</span><br><span class="line">        request.getRequestDispatcher( defaultTargetUrl ).forward( request, response );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h4 id="自定义安全过滤器"><a href="#自定义安全过滤器" class="headerlink" title="自定义安全过滤器"></a>自定义安全过滤器</h4><p>&emsp;&emsp;相对于Springboot大部分的傻瓜式配置来说，这一步算是稍微复杂点的。<br>AbstractSecurityInterceptor是认证和授权的集成 ,没有继承和实现任何和过滤器相关的类，具体和过滤器有关的部分由其子类所实现。每一种受保护对象都拥有继承自AbstrachSecurityInterceptor的拦截器类。spring security 提供了两个具体实现类，MethodSecurityInterceptor 用于受保护的方法，FilterSecurityInterceptor 用于受保护的web 请求，spring security 默认的过滤器是FilterSecurityInterceptor。两者具体工作流程为：<br></p><blockquote><p>查找当前请求里分配的配置属性。<br>把安全对象，当前的Authentication和配置属性,提交给AccessDecisionManager来进行以此认证决定。<br>有可能在调用的过程中,对Authentication进行修改。<br>允许安全对象进行处理（假设访问被允许了）。<br>在调用返回的时候执行配置的AfterInvocationManager。如果调用引发异常,AfterInvocationManager将不会被调用。</p></blockquote><br>&emsp;&emsp;权限鉴定是由AccessDecisionManager 接口中的decide()方法负责的。decide() 方法需要接收一个受保护对象对应的configAttribute集合的。一个configAttribute可能只是一个简单的角色名称，具体将视AccessDecisionManager的实现者而定。由于我们需要自定义过滤器，所以需要重写AbstrachSecurityInterceptor的实现。<p></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line">  <span class="meta">@Service</span> </span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilterSecurityInterceptor</span> <span class="keyword">extends</span> <span class="title">AbstractSecurityInterceptor</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Autowired</span></span><br><span class="line">      <span class="keyword">public</span> MyInvocationSecurityMetadataSourceService myInvocationSecurityMetadataSourceService;</span><br><span class="line">  </span><br><span class="line">      <span class="meta">@Autowired</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyAccessDecisionManager</span><span class="params">( MyAccessDecisionManager myAccessDecisionManager )</span> </span>&#123;</span><br><span class="line">          <span class="keyword">super</span>.setAccessDecisionManager( myAccessDecisionManager );</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">( FilterConfig filterConfig )</span> <span class="keyword">throws</span> ServletException </span>&#123;&#125;</span><br><span class="line">  </span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">( ServletRequest request, ServletResponse response, FilterChain chain )</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">          FilterInvocation fi = <span class="keyword">new</span> FilterInvocation(request, response, chain);</span><br><span class="line">          invoke(fi);</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">( FilterInvocation fi )</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">          <span class="comment">//fi里面有一个被拦截的url</span></span><br><span class="line">          <span class="comment">//里面调用MyInvocationSecurityMetadataSource的getAttributes(Object object)这个方法获取fi对应的所有权限</span></span><br><span class="line">          <span class="comment">//再调用MyAccessDecisionManager的decide方法来校验用户的权限是否足够</span></span><br><span class="line">          InterceptorStatusToken token = <span class="keyword">super</span>.beforeInvocation( fi );</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="comment">//执行下一个拦截器</span></span><br><span class="line">              fi.getChain().doFilter( fi.getRequest(), fi.getResponse() );</span><br><span class="line">          &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">              <span class="keyword">super</span>.afterInvocation( token, <span class="keyword">null</span> );</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  </span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> Class&lt; ? &gt; getSecureObjectClass() &#123;</span><br><span class="line">          <span class="keyword">return</span> FilterInvocation.class;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> SecurityMetadataSource <span class="title">obtainSecurityMetadataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">this</span>.myInvocationSecurityMetadataSourceService;</span><br><span class="line">      &#125;</span><br><span class="line">&#125; </span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Service</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInvocationSecurityMetadataSourceService</span> <span class="keyword">implements</span> <span class="title">FilterInvocationSecurityMetadataSource</span> </span>&#123;</span><br><span class="line">      <span class="meta">@Autowired</span></span><br><span class="line">      <span class="keyword">public</span> TbCfrmUserMapper cfrmUserMapper;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> Logger logger= LoggerFactory.getLogger( MyInvocationSecurityMetadataSourceService.class );</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> HashMap&lt;String, Collection&lt;ConfigAttribute&gt;&gt; map =<span class="keyword">null</span>;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 加载权限表中所有权限</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadResourceDefine</span><span class="params">()</span></span>&#123;</span><br><span class="line">      </span><br><span class="line">          logger.info( <span class="string">"=================loadResourceDefine================="</span> );</span><br><span class="line">          map = <span class="keyword">new</span> HashMap();</span><br><span class="line">          Collection&lt;ConfigAttribute&gt; array;</span><br><span class="line">          ConfigAttribute cfg;</span><br><span class="line">          String role= SecurityUtils.getRole();</span><br><span class="line">          List&lt;FrameAuthorization &gt; authorizations = cfrmUserMapper.selectAuthorizationByRole(role);</span><br><span class="line">          </span><br><span class="line">          <span class="keyword">for</span>(FrameAuthorization authorization : authorizations) &#123;</span><br><span class="line">             cfg = <span class="keyword">new</span> SecurityConfig(authorization.getUrl());</span><br><span class="line">              <span class="comment">//此处添加的信息将会作为MyAccessDecisionManager类的decide的第三个参数。</span></span><br><span class="line">              array.add(cfg);</span><br><span class="line">              <span class="comment">//用权限的getUrl() 作为map的key，用ConfigAttribute的集合作为 value，</span></span><br><span class="line">              map.put(authorization.getUrl(), array);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">//判定用户请求的url 是否在权限表中，如果在权限表中，则返回给 decide 方法，用来判定用户是否有此权限。如果不在权限表中则放行。</span></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> Collection&lt; ConfigAttribute &gt; getAttributes( Object object ) <span class="keyword">throws</span> IllegalArgumentException &#123;</span><br><span class="line">      </span><br><span class="line">          <span class="keyword">if</span>(map ==<span class="keyword">null</span>) loadResourceDefine();</span><br><span class="line">          <span class="comment">//object 中包含用户请求的request 信息</span></span><br><span class="line">          HttpServletRequest request = ((FilterInvocation ) object).getHttpRequest();</span><br><span class="line">          AntPathRequestMatcher matcher;</span><br><span class="line">          String resUrl;</span><br><span class="line">          </span><br><span class="line">          <span class="keyword">for</span>( Iterator&lt;String&gt; iter = map.keySet().iterator(); iter.hasNext(); ) &#123;</span><br><span class="line">              resUrl = iter.next();</span><br><span class="line">              matcher = <span class="keyword">new</span> AntPathRequestMatcher(resUrl);</span><br><span class="line">              <span class="keyword">if</span>(matcher.matches(request)) &#123;</span><br><span class="line">                  <span class="keyword">return</span> map.get(resUrl);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> Collection&lt; ConfigAttribute &gt; getAllConfigAttributes() &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">( Class&lt; ? &gt; aClass )</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//权限验证的核心管理器，重写decide方法可按照实际需求进行验证(比如实现投票器，多对一，一对多，一对一等)。</span></span><br><span class="line">  <span class="meta">@Service</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAccessDecisionManager</span> <span class="keyword">implements</span> <span class="title">AccessDecisionManager</span> </span>&#123;</span><br><span class="line">      Logger logger= LoggerFactory.getLogger( MyAccessDecisionManager.class );</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//authentication 是SecurityUserService中循环添加到 GrantedAuthority 对象中的权限信息集合.</span></span><br><span class="line">      <span class="comment">//object 包含客户端发起的请求的requset信息，可转换为 HttpServletRequest request = ((FilterInvocation) object).getHttpRequest();</span></span><br><span class="line">      <span class="comment">//configAttributes 为MyInvocationSecurityMetadataSource的getAttributes(Object object)这个方法返回的结果，此方法是为了判定用户请求的url 是否在权限表中，如果在权限表中，则返回给 decide 方法，用来判定用户是否有此权限。如果不在权限表中则放行。</span></span><br><span class="line">      <span class="comment">//也即在loadResourceDefine必须对所有需要配置权限的url进行注册，未注册的url不会去检测权限</span></span><br><span class="line">      <span class="comment">//在Authentication中则注册角色权限</span></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decide</span><span class="params">( Authentication authentication, Object o, Collection&lt; ConfigAttribute &gt; configAttributes )</span> <span class="keyword">throws</span> AccessDeniedException, InsufficientAuthenticationException </span>&#123;</span><br><span class="line">  </span><br><span class="line">          <span class="keyword">if</span>(<span class="keyword">null</span>== configAttributes || configAttributes.size() &lt;=<span class="number">0</span>) &#123;</span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          ConfigAttribute c;</span><br><span class="line">          String needRole;</span><br><span class="line">          </span><br><span class="line">          <span class="keyword">for</span>( Iterator&lt;ConfigAttribute&gt; iter = configAttributes.iterator(); iter.hasNext(); ) &#123;</span><br><span class="line">              c = iter.next();</span><br><span class="line">              needRole = c.getAttribute();</span><br><span class="line">              <span class="keyword">for</span>(GrantedAuthority ga : authentication.getAuthorities()) &#123;<span class="comment">//authentication 为在注释1 中循环添加到 GrantedAuthority 对象中的权限信息集合</span></span><br><span class="line">                  <span class="keyword">if</span>(needRole.trim().equals(ga.getAuthority())) &#123;</span><br><span class="line">                      <span class="keyword">return</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">  </span><br><span class="line">          logger.info( <span class="string">"AccessDecisionManager decide:no right"</span> );</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> AccessDeniedException(<span class="string">"no right"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">//全部改为true</span></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">( ConfigAttribute configAttribute )</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">( Class&lt; ? &gt; aClass )</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><p>&emsp;&emsp;注意：这里有个坑，由于项目采用Mybatis作为持久化框架,FilterInvocationSecurityMetadataSource中采用@Autowired注入mapper时可能会报错，建议在xml里面配置强制注入mapper。</p><h4 id="Basic认证"><a href="#Basic认证" class="headerlink" title="Basic认证"></a>Basic认证</h4><p>&emsp;&emsp;如果项目提供的是restful服务，需要对请求进行basic认证，也非常简单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">( HttpSecurity http )</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests().</span><br><span class="line">                requestMatchers( CorsUtils::isPreFlightRequest).permitAll().    <span class="comment">//跨域设置：预请求放行</span></span><br><span class="line">                anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .csrf().disable()    <span class="comment">//禁用csrf</span></span><br><span class="line">                .httpBasic();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="principal获取用户信息"><a href="#principal获取用户信息" class="headerlink" title="principal获取用户信息"></a>principal获取用户信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">将获取登录用户信息的方法进行整理，便于之后使用</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SecurityUser <span class="title">getSecurityUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();</span><br><span class="line">        <span class="keyword">return</span> principal != <span class="keyword">null</span> &amp;&amp; !principal.equals(<span class="string">"anonymousUser"</span>)?(SecurityUser)principal:<span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SecurityUser user = getSecurityUser();</span><br><span class="line">        <span class="keyword">return</span> user == <span class="keyword">null</span>?<span class="string">""</span>:user.getUsername();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getRole</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SecurityUser user = getSecurityUser();</span><br><span class="line">        <span class="keyword">return</span> user == <span class="keyword">null</span>?<span class="string">""</span>:user.getRole();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="收工"><a href="#收工" class="headerlink" title="收工"></a>收工</h3><p>最后完成的WebSecurityConfig配置类就是这样子了：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">     <span class="meta">@Configuration</span></span><br><span class="line">     <span class="meta">@EnableWebSecurity</span></span><br><span class="line">     <span class="meta">@EnableGlobalMethodSecurity</span>(prePostEnabled = <span class="keyword">true</span>, securedEnabled = <span class="keyword">true</span>, jsr250Enabled = <span class="keyword">true</span>)</span><br><span class="line">     <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">         <span class="meta">@Bean</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> MyFilterSecurityInterceptor <span class="title">myFilterSecurityInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">new</span> MyFilterSecurityInterceptor();</span><br><span class="line">         &#125;</span><br><span class="line">     </span><br><span class="line">         <span class="meta">@Bean</span></span><br><span class="line">         <span class="function">UserDetailsService <span class="title">SecurityUserService</span><span class="params">()</span> </span>&#123; <span class="comment">//注册UserDetailsService 的bean</span></span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">new</span> SecurityUserService();</span><br><span class="line">         &#125;</span><br><span class="line">     </span><br><span class="line">         <span class="meta">@Bean</span></span><br><span class="line">         <span class="function">CsrfSecurityRequestMatcher <span class="title">CsrfSecurityRequestMatcher</span><span class="params">()</span> </span>&#123; <span class="comment">//注册UserDetailsService 的bean</span></span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">new</span> CsrfSecurityRequestMatcher();</span><br><span class="line">         &#125;</span><br><span class="line">     </span><br><span class="line">         <span class="meta">@Bean</span></span><br><span class="line">         <span class="function">MyMessageDigestPasswordEncoder <span class="title">MyMessageDigestPasswordEncoder</span><span class="params">()</span> </span>&#123; <span class="comment">//注册md5加密</span></span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">new</span> MyMessageDigestPasswordEncoder( <span class="string">"md5"</span> );</span><br><span class="line">         &#125;</span><br><span class="line">     </span><br><span class="line">         <span class="meta">@Bean</span></span><br><span class="line">         <span class="function">LoginSuccessHandler <span class="title">LoginSuccessHandler</span><span class="params">()</span> </span>&#123; <span class="comment">//登录成功后可使用loginSuccessHandler()处理逻辑。</span></span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">new</span> LoginSuccessHandler();</span><br><span class="line">         &#125;</span><br><span class="line">     </span><br><span class="line">         <span class="meta">@Bean</span></span><br><span class="line">         <span class="function">MyLoginUrlAuthenticationEntryPoint <span class="title">MyLoginUrlAuthenticationEntryPoint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">new</span> MyLoginUrlAuthenticationEntryPoint(<span class="string">"/login"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     </span><br><span class="line">         <span class="meta">@Bean</span></span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">protected</span> AuthenticationManager <span class="title">authenticationManager</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">super</span>.authenticationManager();</span><br><span class="line">         &#125;</span><br><span class="line">         </span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">             <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">( AuthenticationManagerBuilder auth )</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                 auth.userDetailsService( SecurityUserService() ).passwordEncoder( MyMessageDigestPasswordEncoder() );</span><br><span class="line">             &#125;</span><br><span class="line">         </span><br><span class="line">             <span class="meta">@Override</span></span><br><span class="line">             <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                 <span class="comment">//HttpSecurity优先级高于WebSecurity</span></span><br><span class="line">                 web.ignoring().antMatchers( <span class="string">"/assets/**"</span> );</span><br><span class="line">             &#125;</span><br><span class="line">         </span><br><span class="line">             <span class="meta">@Override</span></span><br><span class="line">             <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">( HttpSecurity http )</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">         </span><br><span class="line">                 http.authorizeRequests()</span><br><span class="line">                         .antMatchers(<span class="string">"/login"</span> , <span class="string">"/state/**"</span>,<span class="string">"/api/**"</span>).permitAll()</span><br><span class="line">                         .antMatchers( <span class="string">"/frame/**"</span> ).hasRole( <span class="string">"admin"</span> )       <span class="comment">//hasRole/hasAuthority本质上一样</span></span><br><span class="line">                         .anyRequest().authenticated()</span><br><span class="line">                         .and()</span><br><span class="line">                         .formLogin()</span><br><span class="line">                         .loginPage( <span class="string">"/login"</span> )</span><br><span class="line">                         .loginProcessingUrl( <span class="string">"/login"</span> )</span><br><span class="line">         <span class="comment">//                .successForwardUrl( "/index" )  //登录是post请求，成功后跳转至index页面，需要index也支持post</span></span><br><span class="line">                         .successHandler( LoginSuccessHandler() )  <span class="comment">//配置successHandler后,successForwardUrl会失效，默认重定向路径"/"</span></span><br><span class="line">                         .failureUrl( <span class="string">"/login"</span> )</span><br><span class="line">                         .and()</span><br><span class="line">                         .csrf()</span><br><span class="line">         <span class="comment">//                .disable()</span></span><br><span class="line">                         .requireCsrfProtectionMatcher( CsrfSecurityRequestMatcher() )  <span class="comment">//配置csrf</span></span><br><span class="line">                         .and()</span><br><span class="line">                         .rememberMe()</span><br><span class="line">                         .tokenRepository( <span class="keyword">new</span> InMemoryTokenRepositoryImpl() )</span><br><span class="line">                         .tokenValiditySeconds( <span class="number">1209600</span> )<span class="comment">/*记住登录状态2周*/</span></span><br><span class="line">                         .and()</span><br><span class="line">                         .logout()</span><br><span class="line">                         .logoutRequestMatcher( <span class="keyword">new</span> AntPathRequestMatcher( <span class="string">"/logout"</span>, <span class="string">"POST"</span> ) )   <span class="comment">//开启csrf后注销需使用post表单提交</span></span><br><span class="line">         <span class="comment">//                .deleteCookies( "remember-me" )</span></span><br><span class="line">         <span class="comment">//                .deleteCookies( "JSESSIONID","remember-me" )</span></span><br><span class="line">                         .clearAuthentication( <span class="keyword">true</span> )</span><br><span class="line">                         .invalidateHttpSession( <span class="keyword">true</span> )</span><br><span class="line">                         .logoutSuccessUrl( <span class="string">"/login"</span> )</span><br><span class="line">                         .and()</span><br><span class="line">                         .sessionManagement()</span><br><span class="line">                         .invalidSessionUrl(<span class="string">"/login"</span>)</span><br><span class="line">                         .maximumSessions( <span class="number">1</span> )   <span class="comment">//设置最大登录数1，后面登录会踢掉当前用户</span></span><br><span class="line">                         .expiredUrl( <span class="string">"/login"</span> );</span><br><span class="line">         </span><br><span class="line">                         http.addFilterBefore( myFilterSecurityInterceptor(), FilterSecurityInterceptor.class );</span><br><span class="line">             &#125;</span><br><span class="line">&#125;</span><br><span class="line">     </span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Jul 12 2019 16:40:24 GMT+0800 (China Standard Time) --&gt;&lt;p&gt;&amp;emsp;&amp;emsp;公司后台管理项目之前采用的是shiro做权限验证，前段时间花了点时间替换成了Spring Secur
      
    
    </summary>
    
      <category term="Java" scheme="https://github.com/lsfst/lsfst.github.io/categories/Java/"/>
    
    
      <category term="Springboot" scheme="https://github.com/lsfst/lsfst.github.io/tags/Springboot/"/>
    
      <category term="Spring Security" scheme="https://github.com/lsfst/lsfst.github.io/tags/Spring-Security/"/>
    
  </entry>
  
</feed>
